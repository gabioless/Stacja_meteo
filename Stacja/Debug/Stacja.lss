
Stacja.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001562  000015d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001562  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001704  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e50  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00003b34  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00003b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fa9  00000000  00000000  00003cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe7  00000000  00000000  00005c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093b  00000000  00000000  00006c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00007588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  000077d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bfd  00000000  00000000  00007b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00008723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e2 e6       	ldi	r30, 0x62	; 98
      90:	f5 e1       	ldi	r31, 0x15	; 21
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 30       	cpi	r26, 0x08	; 8
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
      9e:	0e 94 56 09 	call	0x12ac	; 0x12ac <main>
      a2:	0c 94 af 0a 	jmp	0x155e	; 0x155e <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <__fixunssfsi>:
      aa:	cf 92       	push	r12
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	6b 01       	movw	r12, r22
      b8:	7c 01       	movw	r14, r24
      ba:	20 e0       	ldi	r18, 0x00	; 0
      bc:	30 e0       	ldi	r19, 0x00	; 0
      be:	40 e0       	ldi	r20, 0x00	; 0
      c0:	5f e4       	ldi	r21, 0x4F	; 79
      c2:	0e 94 4e 03 	call	0x69c	; 0x69c <__gesf2>
      c6:	87 fd       	sbrc	r24, 7
      c8:	0e c0       	rjmp	.+28     	; 0xe6 <__fixunssfsi+0x3c>
      ca:	20 e0       	ldi	r18, 0x00	; 0
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	5f e4       	ldi	r21, 0x4F	; 79
      d2:	c7 01       	movw	r24, r14
      d4:	b6 01       	movw	r22, r12
      d6:	0e 94 0a 02 	call	0x414	; 0x414 <__subsf3>
      da:	0e 94 ac 03 	call	0x758	; 0x758 <__fixsfsi>
      de:	8b 01       	movw	r16, r22
      e0:	9c 01       	movw	r18, r24
      e2:	30 58       	subi	r19, 0x80	; 128
      e4:	06 c0       	rjmp	.+12     	; 0xf2 <__fixunssfsi+0x48>
      e6:	c7 01       	movw	r24, r14
      e8:	b6 01       	movw	r22, r12
      ea:	0e 94 ac 03 	call	0x758	; 0x758 <__fixsfsi>
      ee:	8b 01       	movw	r16, r22
      f0:	9c 01       	movw	r18, r24
      f2:	b8 01       	movw	r22, r16
      f4:	c9 01       	movw	r24, r18
      f6:	1f 91       	pop	r17
      f8:	0f 91       	pop	r16
      fa:	ff 90       	pop	r15
      fc:	ef 90       	pop	r14
      fe:	df 90       	pop	r13
     100:	cf 90       	pop	r12
     102:	08 95       	ret

00000104 <_fpadd_parts>:
     104:	a4 e0       	ldi	r26, 0x04	; 4
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e8 e8       	ldi	r30, 0x88	; 136
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__prologue_saves__+0x4>
     110:	7c 01       	movw	r14, r24
     112:	6a 01       	movw	r12, r20
     114:	fc 01       	movw	r30, r24
     116:	80 81       	ld	r24, Z
     118:	82 30       	cpi	r24, 0x02	; 2
     11a:	08 f4       	brcc	.+2      	; 0x11e <_fpadd_parts+0x1a>
     11c:	4a c1       	rjmp	.+660    	; 0x3b2 <_fpadd_parts+0x2ae>
     11e:	fb 01       	movw	r30, r22
     120:	90 81       	ld	r25, Z
     122:	92 30       	cpi	r25, 0x02	; 2
     124:	08 f4       	brcc	.+2      	; 0x128 <_fpadd_parts+0x24>
     126:	42 c1       	rjmp	.+644    	; 0x3ac <_fpadd_parts+0x2a8>
     128:	84 30       	cpi	r24, 0x04	; 4
     12a:	79 f4       	brne	.+30     	; 0x14a <_fpadd_parts+0x46>
     12c:	94 30       	cpi	r25, 0x04	; 4
     12e:	09 f0       	breq	.+2      	; 0x132 <_fpadd_parts+0x2e>
     130:	40 c1       	rjmp	.+640    	; 0x3b2 <_fpadd_parts+0x2ae>
     132:	f7 01       	movw	r30, r14
     134:	91 81       	ldd	r25, Z+1	; 0x01
     136:	fb 01       	movw	r30, r22
     138:	81 81       	ldd	r24, Z+1	; 0x01
     13a:	98 17       	cp	r25, r24
     13c:	09 f4       	brne	.+2      	; 0x140 <_fpadd_parts+0x3c>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x2ae>
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	ea 2e       	mov	r14, r26
     144:	a1 e0       	ldi	r26, 0x01	; 1
     146:	fa 2e       	mov	r15, r26
     148:	34 c1       	rjmp	.+616    	; 0x3b2 <_fpadd_parts+0x2ae>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	09 f4       	brne	.+2      	; 0x150 <_fpadd_parts+0x4c>
     14e:	2e c1       	rjmp	.+604    	; 0x3ac <_fpadd_parts+0x2a8>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	91 f4       	brne	.+36     	; 0x178 <_fpadd_parts+0x74>
     154:	82 30       	cpi	r24, 0x02	; 2
     156:	09 f0       	breq	.+2      	; 0x15a <_fpadd_parts+0x56>
     158:	2c c1       	rjmp	.+600    	; 0x3b2 <_fpadd_parts+0x2ae>
     15a:	88 e0       	ldi	r24, 0x08	; 8
     15c:	f7 01       	movw	r30, r14
     15e:	da 01       	movw	r26, r20
     160:	01 90       	ld	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	8a 95       	dec	r24
     166:	e1 f7       	brne	.-8      	; 0x160 <_fpadd_parts+0x5c>
     168:	fb 01       	movw	r30, r22
     16a:	81 81       	ldd	r24, Z+1	; 0x01
     16c:	f7 01       	movw	r30, r14
     16e:	91 81       	ldd	r25, Z+1	; 0x01
     170:	89 23       	and	r24, r25
     172:	fa 01       	movw	r30, r20
     174:	81 83       	std	Z+1, r24	; 0x01
     176:	1c c1       	rjmp	.+568    	; 0x3b0 <_fpadd_parts+0x2ac>
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	09 f4       	brne	.+2      	; 0x17e <_fpadd_parts+0x7a>
     17c:	17 c1       	rjmp	.+558    	; 0x3ac <_fpadd_parts+0x2a8>
     17e:	f7 01       	movw	r30, r14
     180:	82 81       	ldd	r24, Z+2	; 0x02
     182:	93 81       	ldd	r25, Z+3	; 0x03
     184:	fb 01       	movw	r30, r22
     186:	a2 81       	ldd	r26, Z+2	; 0x02
     188:	b3 81       	ldd	r27, Z+3	; 0x03
     18a:	f7 01       	movw	r30, r14
     18c:	04 81       	ldd	r16, Z+4	; 0x04
     18e:	15 81       	ldd	r17, Z+5	; 0x05
     190:	26 81       	ldd	r18, Z+6	; 0x06
     192:	37 81       	ldd	r19, Z+7	; 0x07
     194:	fb 01       	movw	r30, r22
     196:	84 80       	ldd	r8, Z+4	; 0x04
     198:	95 80       	ldd	r9, Z+5	; 0x05
     19a:	a6 80       	ldd	r10, Z+6	; 0x06
     19c:	b7 80       	ldd	r11, Z+7	; 0x07
     19e:	fc 01       	movw	r30, r24
     1a0:	ea 1b       	sub	r30, r26
     1a2:	fb 0b       	sbc	r31, r27
     1a4:	af 01       	movw	r20, r30
     1a6:	f7 ff       	sbrs	r31, 7
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <_fpadd_parts+0xae>
     1aa:	44 27       	eor	r20, r20
     1ac:	55 27       	eor	r21, r21
     1ae:	4e 1b       	sub	r20, r30
     1b0:	5f 0b       	sbc	r21, r31
     1b2:	40 32       	cpi	r20, 0x20	; 32
     1b4:	51 05       	cpc	r21, r1
     1b6:	0c f0       	brlt	.+2      	; 0x1ba <_fpadd_parts+0xb6>
     1b8:	74 c0       	rjmp	.+232    	; 0x2a2 <_fpadd_parts+0x19e>
     1ba:	1e 16       	cp	r1, r30
     1bc:	1f 06       	cpc	r1, r31
     1be:	b4 f5       	brge	.+108    	; 0x22c <_fpadd_parts+0x128>
     1c0:	24 01       	movw	r4, r8
     1c2:	35 01       	movw	r6, r10
     1c4:	04 2e       	mov	r0, r20
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xcc>
     1c8:	76 94       	lsr	r7
     1ca:	67 94       	ror	r6
     1cc:	57 94       	ror	r5
     1ce:	47 94       	ror	r4
     1d0:	0a 94       	dec	r0
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xc4>
     1d4:	49 82       	std	Y+1, r4	; 0x01
     1d6:	5a 82       	std	Y+2, r5	; 0x02
     1d8:	6b 82       	std	Y+3, r6	; 0x03
     1da:	7c 82       	std	Y+4, r7	; 0x04
     1dc:	41 2c       	mov	r4, r1
     1de:	51 2c       	mov	r5, r1
     1e0:	32 01       	movw	r6, r4
     1e2:	43 94       	inc	r4
     1e4:	04 c0       	rjmp	.+8      	; 0x1ee <_fpadd_parts+0xea>
     1e6:	44 0c       	add	r4, r4
     1e8:	55 1c       	adc	r5, r5
     1ea:	66 1c       	adc	r6, r6
     1ec:	77 1c       	adc	r7, r7
     1ee:	4a 95       	dec	r20
     1f0:	d2 f7       	brpl	.-12     	; 0x1e6 <_fpadd_parts+0xe2>
     1f2:	41 e0       	ldi	r20, 0x01	; 1
     1f4:	44 1a       	sub	r4, r20
     1f6:	51 08       	sbc	r5, r1
     1f8:	61 08       	sbc	r6, r1
     1fa:	71 08       	sbc	r7, r1
     1fc:	48 20       	and	r4, r8
     1fe:	59 20       	and	r5, r9
     200:	6a 20       	and	r6, r10
     202:	7b 20       	and	r7, r11
     204:	81 2c       	mov	r8, r1
     206:	91 2c       	mov	r9, r1
     208:	54 01       	movw	r10, r8
     20a:	83 94       	inc	r8
     20c:	45 28       	or	r4, r5
     20e:	46 28       	or	r4, r6
     210:	47 28       	or	r4, r7
     212:	19 f4       	brne	.+6      	; 0x21a <_fpadd_parts+0x116>
     214:	81 2c       	mov	r8, r1
     216:	91 2c       	mov	r9, r1
     218:	54 01       	movw	r10, r8
     21a:	49 80       	ldd	r4, Y+1	; 0x01
     21c:	5a 80       	ldd	r5, Y+2	; 0x02
     21e:	6b 80       	ldd	r6, Y+3	; 0x03
     220:	7c 80       	ldd	r7, Y+4	; 0x04
     222:	84 28       	or	r8, r4
     224:	95 28       	or	r9, r5
     226:	a6 28       	or	r10, r6
     228:	b7 28       	or	r11, r7
     22a:	46 c0       	rjmp	.+140    	; 0x2b8 <_fpadd_parts+0x1b4>
     22c:	ef 2b       	or	r30, r31
     22e:	09 f4       	brne	.+2      	; 0x232 <_fpadd_parts+0x12e>
     230:	43 c0       	rjmp	.+134    	; 0x2b8 <_fpadd_parts+0x1b4>
     232:	84 0f       	add	r24, r20
     234:	95 1f       	adc	r25, r21
     236:	28 01       	movw	r4, r16
     238:	39 01       	movw	r6, r18
     23a:	04 2e       	mov	r0, r20
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x142>
     23e:	76 94       	lsr	r7
     240:	67 94       	ror	r6
     242:	57 94       	ror	r5
     244:	47 94       	ror	r4
     246:	0a 94       	dec	r0
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x13a>
     24a:	49 82       	std	Y+1, r4	; 0x01
     24c:	5a 82       	std	Y+2, r5	; 0x02
     24e:	6b 82       	std	Y+3, r6	; 0x03
     250:	7c 82       	std	Y+4, r7	; 0x04
     252:	41 2c       	mov	r4, r1
     254:	51 2c       	mov	r5, r1
     256:	32 01       	movw	r6, r4
     258:	43 94       	inc	r4
     25a:	04 c0       	rjmp	.+8      	; 0x264 <_fpadd_parts+0x160>
     25c:	44 0c       	add	r4, r4
     25e:	55 1c       	adc	r5, r5
     260:	66 1c       	adc	r6, r6
     262:	77 1c       	adc	r7, r7
     264:	4a 95       	dec	r20
     266:	d2 f7       	brpl	.-12     	; 0x25c <_fpadd_parts+0x158>
     268:	41 e0       	ldi	r20, 0x01	; 1
     26a:	44 1a       	sub	r4, r20
     26c:	51 08       	sbc	r5, r1
     26e:	61 08       	sbc	r6, r1
     270:	71 08       	sbc	r7, r1
     272:	40 22       	and	r4, r16
     274:	51 22       	and	r5, r17
     276:	62 22       	and	r6, r18
     278:	73 22       	and	r7, r19
     27a:	01 e0       	ldi	r16, 0x01	; 1
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	45 28       	or	r4, r5
     284:	46 28       	or	r4, r6
     286:	47 28       	or	r4, r7
     288:	19 f4       	brne	.+6      	; 0x290 <_fpadd_parts+0x18c>
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	10 e0       	ldi	r17, 0x00	; 0
     28e:	98 01       	movw	r18, r16
     290:	49 80       	ldd	r4, Y+1	; 0x01
     292:	5a 80       	ldd	r5, Y+2	; 0x02
     294:	6b 80       	ldd	r6, Y+3	; 0x03
     296:	7c 80       	ldd	r7, Y+4	; 0x04
     298:	04 29       	or	r16, r4
     29a:	15 29       	or	r17, r5
     29c:	26 29       	or	r18, r6
     29e:	37 29       	or	r19, r7
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x1b4>
     2a2:	a8 17       	cp	r26, r24
     2a4:	b9 07       	cpc	r27, r25
     2a6:	24 f4       	brge	.+8      	; 0x2b0 <_fpadd_parts+0x1ac>
     2a8:	81 2c       	mov	r8, r1
     2aa:	91 2c       	mov	r9, r1
     2ac:	54 01       	movw	r10, r8
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <_fpadd_parts+0x1b4>
     2b0:	cd 01       	movw	r24, r26
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	10 e0       	ldi	r17, 0x00	; 0
     2b6:	98 01       	movw	r18, r16
     2b8:	f7 01       	movw	r30, r14
     2ba:	41 81       	ldd	r20, Z+1	; 0x01
     2bc:	fb 01       	movw	r30, r22
     2be:	51 81       	ldd	r21, Z+1	; 0x01
     2c0:	45 17       	cp	r20, r21
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <_fpadd_parts+0x1c2>
     2c4:	46 c0       	rjmp	.+140    	; 0x352 <_fpadd_parts+0x24e>
     2c6:	44 23       	and	r20, r20
     2c8:	49 f0       	breq	.+18     	; 0x2dc <_fpadd_parts+0x1d8>
     2ca:	24 01       	movw	r4, r8
     2cc:	35 01       	movw	r6, r10
     2ce:	40 1a       	sub	r4, r16
     2d0:	51 0a       	sbc	r5, r17
     2d2:	62 0a       	sbc	r6, r18
     2d4:	73 0a       	sbc	r7, r19
     2d6:	93 01       	movw	r18, r6
     2d8:	82 01       	movw	r16, r4
     2da:	04 c0       	rjmp	.+8      	; 0x2e4 <_fpadd_parts+0x1e0>
     2dc:	08 19       	sub	r16, r8
     2de:	19 09       	sbc	r17, r9
     2e0:	2a 09       	sbc	r18, r10
     2e2:	3b 09       	sbc	r19, r11
     2e4:	37 fd       	sbrc	r19, 7
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <_fpadd_parts+0x1ee>
     2e8:	f6 01       	movw	r30, r12
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	93 83       	std	Z+3, r25	; 0x03
     2ee:	82 83       	std	Z+2, r24	; 0x02
     2f0:	0c c0       	rjmp	.+24     	; 0x30a <_fpadd_parts+0x206>
     2f2:	41 e0       	ldi	r20, 0x01	; 1
     2f4:	f6 01       	movw	r30, r12
     2f6:	41 83       	std	Z+1, r20	; 0x01
     2f8:	93 83       	std	Z+3, r25	; 0x03
     2fa:	82 83       	std	Z+2, r24	; 0x02
     2fc:	30 95       	com	r19
     2fe:	20 95       	com	r18
     300:	10 95       	com	r17
     302:	01 95       	neg	r16
     304:	1f 4f       	sbci	r17, 0xFF	; 255
     306:	2f 4f       	sbci	r18, 0xFF	; 255
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	04 83       	std	Z+4, r16	; 0x04
     30c:	15 83       	std	Z+5, r17	; 0x05
     30e:	26 83       	std	Z+6, r18	; 0x06
     310:	37 83       	std	Z+7, r19	; 0x07
     312:	0e c0       	rjmp	.+28     	; 0x330 <_fpadd_parts+0x22c>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	aa 1f       	adc	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	f6 01       	movw	r30, r12
     31e:	84 83       	std	Z+4, r24	; 0x04
     320:	95 83       	std	Z+5, r25	; 0x05
     322:	a6 83       	std	Z+6, r26	; 0x06
     324:	b7 83       	std	Z+7, r27	; 0x07
     326:	82 81       	ldd	r24, Z+2	; 0x02
     328:	93 81       	ldd	r25, Z+3	; 0x03
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	93 83       	std	Z+3, r25	; 0x03
     32e:	82 83       	std	Z+2, r24	; 0x02
     330:	f6 01       	movw	r30, r12
     332:	84 81       	ldd	r24, Z+4	; 0x04
     334:	95 81       	ldd	r25, Z+5	; 0x05
     336:	a6 81       	ldd	r26, Z+6	; 0x06
     338:	b7 81       	ldd	r27, Z+7	; 0x07
     33a:	ac 01       	movw	r20, r24
     33c:	bd 01       	movw	r22, r26
     33e:	41 50       	subi	r20, 0x01	; 1
     340:	51 09       	sbc	r21, r1
     342:	61 09       	sbc	r22, r1
     344:	71 09       	sbc	r23, r1
     346:	4f 3f       	cpi	r20, 0xFF	; 255
     348:	5f 4f       	sbci	r21, 0xFF	; 255
     34a:	6f 4f       	sbci	r22, 0xFF	; 255
     34c:	7f 43       	sbci	r23, 0x3F	; 63
     34e:	10 f3       	brcs	.-60     	; 0x314 <_fpadd_parts+0x210>
     350:	0c c0       	rjmp	.+24     	; 0x36a <_fpadd_parts+0x266>
     352:	f6 01       	movw	r30, r12
     354:	41 83       	std	Z+1, r20	; 0x01
     356:	93 83       	std	Z+3, r25	; 0x03
     358:	82 83       	std	Z+2, r24	; 0x02
     35a:	08 0d       	add	r16, r8
     35c:	19 1d       	adc	r17, r9
     35e:	2a 1d       	adc	r18, r10
     360:	3b 1d       	adc	r19, r11
     362:	04 83       	std	Z+4, r16	; 0x04
     364:	15 83       	std	Z+5, r17	; 0x05
     366:	26 83       	std	Z+6, r18	; 0x06
     368:	37 83       	std	Z+7, r19	; 0x07
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	f6 01       	movw	r30, r12
     36e:	80 83       	st	Z, r24
     370:	44 81       	ldd	r20, Z+4	; 0x04
     372:	55 81       	ldd	r21, Z+5	; 0x05
     374:	66 81       	ldd	r22, Z+6	; 0x06
     376:	77 81       	ldd	r23, Z+7	; 0x07
     378:	77 ff       	sbrs	r23, 7
     37a:	1a c0       	rjmp	.+52     	; 0x3b0 <_fpadd_parts+0x2ac>
     37c:	db 01       	movw	r26, r22
     37e:	ca 01       	movw	r24, r20
     380:	81 70       	andi	r24, 0x01	; 1
     382:	99 27       	eor	r25, r25
     384:	aa 27       	eor	r26, r26
     386:	bb 27       	eor	r27, r27
     388:	76 95       	lsr	r23
     38a:	67 95       	ror	r22
     38c:	57 95       	ror	r21
     38e:	47 95       	ror	r20
     390:	84 2b       	or	r24, r20
     392:	95 2b       	or	r25, r21
     394:	a6 2b       	or	r26, r22
     396:	b7 2b       	or	r27, r23
     398:	84 83       	std	Z+4, r24	; 0x04
     39a:	95 83       	std	Z+5, r25	; 0x05
     39c:	a6 83       	std	Z+6, r26	; 0x06
     39e:	b7 83       	std	Z+7, r27	; 0x07
     3a0:	82 81       	ldd	r24, Z+2	; 0x02
     3a2:	93 81       	ldd	r25, Z+3	; 0x03
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	93 83       	std	Z+3, r25	; 0x03
     3a8:	82 83       	std	Z+2, r24	; 0x02
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_fpadd_parts+0x2ac>
     3ac:	7b 01       	movw	r14, r22
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x2ae>
     3b0:	76 01       	movw	r14, r12
     3b2:	c7 01       	movw	r24, r14
     3b4:	24 96       	adiw	r28, 0x04	; 4
     3b6:	e0 e1       	ldi	r30, 0x10	; 16
     3b8:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__epilogue_restores__+0x4>

000003bc <__addsf3>:
     3bc:	a0 e2       	ldi	r26, 0x20	; 32
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	e4 ee       	ldi	r30, 0xE4	; 228
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__prologue_saves__+0x20>
     3c8:	6d 8f       	std	Y+29, r22	; 0x1d
     3ca:	7e 8f       	std	Y+30, r23	; 0x1e
     3cc:	8f 8f       	std	Y+31, r24	; 0x1f
     3ce:	98 a3       	std	Y+32, r25	; 0x20
     3d0:	29 8f       	std	Y+25, r18	; 0x19
     3d2:	3a 8f       	std	Y+26, r19	; 0x1a
     3d4:	4b 8f       	std	Y+27, r20	; 0x1b
     3d6:	5c 8f       	std	Y+28, r21	; 0x1c
     3d8:	be 01       	movw	r22, r28
     3da:	6f 5e       	subi	r22, 0xEF	; 239
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	ce 01       	movw	r24, r28
     3e0:	4d 96       	adiw	r24, 0x1d	; 29
     3e2:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     3e6:	be 01       	movw	r22, r28
     3e8:	67 5f       	subi	r22, 0xF7	; 247
     3ea:	7f 4f       	sbci	r23, 0xFF	; 255
     3ec:	ce 01       	movw	r24, r28
     3ee:	49 96       	adiw	r24, 0x19	; 25
     3f0:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     3f4:	ae 01       	movw	r20, r28
     3f6:	4f 5f       	subi	r20, 0xFF	; 255
     3f8:	5f 4f       	sbci	r21, 0xFF	; 255
     3fa:	be 01       	movw	r22, r28
     3fc:	67 5f       	subi	r22, 0xF7	; 247
     3fe:	7f 4f       	sbci	r23, 0xFF	; 255
     400:	ce 01       	movw	r24, r28
     402:	41 96       	adiw	r24, 0x11	; 17
     404:	0e 94 82 00 	call	0x104	; 0x104 <_fpadd_parts>
     408:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__pack_f>
     40c:	a0 96       	adiw	r28, 0x20	; 32
     40e:	e2 e0       	ldi	r30, 0x02	; 2
     410:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__epilogue_restores__+0x20>

00000414 <__subsf3>:
     414:	a0 e2       	ldi	r26, 0x20	; 32
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e0 e1       	ldi	r30, 0x10	; 16
     41a:	f2 e0       	ldi	r31, 0x02	; 2
     41c:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__prologue_saves__+0x20>
     420:	6d 8f       	std	Y+29, r22	; 0x1d
     422:	7e 8f       	std	Y+30, r23	; 0x1e
     424:	8f 8f       	std	Y+31, r24	; 0x1f
     426:	98 a3       	std	Y+32, r25	; 0x20
     428:	29 8f       	std	Y+25, r18	; 0x19
     42a:	3a 8f       	std	Y+26, r19	; 0x1a
     42c:	4b 8f       	std	Y+27, r20	; 0x1b
     42e:	5c 8f       	std	Y+28, r21	; 0x1c
     430:	be 01       	movw	r22, r28
     432:	6f 5e       	subi	r22, 0xEF	; 239
     434:	7f 4f       	sbci	r23, 0xFF	; 255
     436:	ce 01       	movw	r24, r28
     438:	4d 96       	adiw	r24, 0x1d	; 29
     43a:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     43e:	be 01       	movw	r22, r28
     440:	67 5f       	subi	r22, 0xF7	; 247
     442:	7f 4f       	sbci	r23, 0xFF	; 255
     444:	ce 01       	movw	r24, r28
     446:	49 96       	adiw	r24, 0x19	; 25
     448:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     44c:	8a 85       	ldd	r24, Y+10	; 0x0a
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	89 27       	eor	r24, r25
     452:	8a 87       	std	Y+10, r24	; 0x0a
     454:	ae 01       	movw	r20, r28
     456:	4f 5f       	subi	r20, 0xFF	; 255
     458:	5f 4f       	sbci	r21, 0xFF	; 255
     45a:	be 01       	movw	r22, r28
     45c:	67 5f       	subi	r22, 0xF7	; 247
     45e:	7f 4f       	sbci	r23, 0xFF	; 255
     460:	ce 01       	movw	r24, r28
     462:	41 96       	adiw	r24, 0x11	; 17
     464:	0e 94 82 00 	call	0x104	; 0x104 <_fpadd_parts>
     468:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__pack_f>
     46c:	a0 96       	adiw	r28, 0x20	; 32
     46e:	e2 e0       	ldi	r30, 0x02	; 2
     470:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__epilogue_restores__+0x20>

00000474 <__mulsf3>:
     474:	a0 e2       	ldi	r26, 0x20	; 32
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	e0 e4       	ldi	r30, 0x40	; 64
     47a:	f2 e0       	ldi	r31, 0x02	; 2
     47c:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__prologue_saves__+0x4>
     480:	6d 8f       	std	Y+29, r22	; 0x1d
     482:	7e 8f       	std	Y+30, r23	; 0x1e
     484:	8f 8f       	std	Y+31, r24	; 0x1f
     486:	98 a3       	std	Y+32, r25	; 0x20
     488:	29 8f       	std	Y+25, r18	; 0x19
     48a:	3a 8f       	std	Y+26, r19	; 0x1a
     48c:	4b 8f       	std	Y+27, r20	; 0x1b
     48e:	5c 8f       	std	Y+28, r21	; 0x1c
     490:	be 01       	movw	r22, r28
     492:	6f 5e       	subi	r22, 0xEF	; 239
     494:	7f 4f       	sbci	r23, 0xFF	; 255
     496:	ce 01       	movw	r24, r28
     498:	4d 96       	adiw	r24, 0x1d	; 29
     49a:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     49e:	be 01       	movw	r22, r28
     4a0:	67 5f       	subi	r22, 0xF7	; 247
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	ce 01       	movw	r24, r28
     4a6:	49 96       	adiw	r24, 0x19	; 25
     4a8:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     4ac:	99 89       	ldd	r25, Y+17	; 0x11
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	08 f4       	brcc	.+2      	; 0x4b4 <__mulsf3+0x40>
     4b2:	12 c0       	rjmp	.+36     	; 0x4d8 <__mulsf3+0x64>
     4b4:	89 85       	ldd	r24, Y+9	; 0x09
     4b6:	82 30       	cpi	r24, 0x02	; 2
     4b8:	08 f4       	brcc	.+2      	; 0x4bc <__mulsf3+0x48>
     4ba:	1a c0       	rjmp	.+52     	; 0x4f0 <__mulsf3+0x7c>
     4bc:	94 30       	cpi	r25, 0x04	; 4
     4be:	21 f4       	brne	.+8      	; 0x4c8 <__mulsf3+0x54>
     4c0:	82 30       	cpi	r24, 0x02	; 2
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <__mulsf3+0x52>
     4c4:	b4 c0       	rjmp	.+360    	; 0x62e <__mulsf3+0x1ba>
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <__mulsf3+0x64>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	21 f4       	brne	.+8      	; 0x4d4 <__mulsf3+0x60>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <__mulsf3+0x5e>
     4d0:	ae c0       	rjmp	.+348    	; 0x62e <__mulsf3+0x1ba>
     4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <__mulsf3+0x7c>
     4d4:	92 30       	cpi	r25, 0x02	; 2
     4d6:	51 f4       	brne	.+20     	; 0x4ec <__mulsf3+0x78>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	2a 89       	ldd	r18, Y+18	; 0x12
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	29 13       	cpse	r18, r25
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <__mulsf3+0x70>
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	8a 8b       	std	Y+18, r24	; 0x12
     4e6:	ce 01       	movw	r24, r28
     4e8:	41 96       	adiw	r24, 0x11	; 17
     4ea:	a3 c0       	rjmp	.+326    	; 0x632 <__mulsf3+0x1be>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	51 f4       	brne	.+20     	; 0x504 <__mulsf3+0x90>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	2a 89       	ldd	r18, Y+18	; 0x12
     4f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f6:	29 13       	cpse	r18, r25
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <__mulsf3+0x88>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	8a 87       	std	Y+10, r24	; 0x0a
     4fe:	ce 01       	movw	r24, r28
     500:	09 96       	adiw	r24, 0x09	; 9
     502:	97 c0       	rjmp	.+302    	; 0x632 <__mulsf3+0x1be>
     504:	8d 88       	ldd	r8, Y+21	; 0x15
     506:	9e 88       	ldd	r9, Y+22	; 0x16
     508:	af 88       	ldd	r10, Y+23	; 0x17
     50a:	b8 8c       	ldd	r11, Y+24	; 0x18
     50c:	0d 85       	ldd	r16, Y+13	; 0x0d
     50e:	1e 85       	ldd	r17, Y+14	; 0x0e
     510:	2f 85       	ldd	r18, Y+15	; 0x0f
     512:	38 89       	ldd	r19, Y+16	; 0x10
     514:	e0 e2       	ldi	r30, 0x20	; 32
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	dc 01       	movw	r26, r24
     51e:	c1 2c       	mov	r12, r1
     520:	d1 2c       	mov	r13, r1
     522:	76 01       	movw	r14, r12
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	ba 01       	movw	r22, r20
     52a:	80 fe       	sbrs	r8, 0
     52c:	18 c0       	rjmp	.+48     	; 0x55e <__mulsf3+0xea>
     52e:	40 0f       	add	r20, r16
     530:	51 1f       	adc	r21, r17
     532:	62 1f       	adc	r22, r18
     534:	73 1f       	adc	r23, r19
     536:	8c 0d       	add	r24, r12
     538:	9d 1d       	adc	r25, r13
     53a:	ae 1d       	adc	r26, r14
     53c:	bf 1d       	adc	r27, r15
     53e:	41 2c       	mov	r4, r1
     540:	51 2c       	mov	r5, r1
     542:	32 01       	movw	r6, r4
     544:	43 94       	inc	r4
     546:	40 17       	cp	r20, r16
     548:	51 07       	cpc	r21, r17
     54a:	62 07       	cpc	r22, r18
     54c:	73 07       	cpc	r23, r19
     54e:	18 f0       	brcs	.+6      	; 0x556 <__mulsf3+0xe2>
     550:	41 2c       	mov	r4, r1
     552:	51 2c       	mov	r5, r1
     554:	32 01       	movw	r6, r4
     556:	84 0d       	add	r24, r4
     558:	95 1d       	adc	r25, r5
     55a:	a6 1d       	adc	r26, r6
     55c:	b7 1d       	adc	r27, r7
     55e:	cc 0c       	add	r12, r12
     560:	dd 1c       	adc	r13, r13
     562:	ee 1c       	adc	r14, r14
     564:	ff 1c       	adc	r15, r15
     566:	37 ff       	sbrs	r19, 7
     568:	02 c0       	rjmp	.+4      	; 0x56e <__mulsf3+0xfa>
     56a:	68 94       	set
     56c:	c0 f8       	bld	r12, 0
     56e:	00 0f       	add	r16, r16
     570:	11 1f       	adc	r17, r17
     572:	22 1f       	adc	r18, r18
     574:	33 1f       	adc	r19, r19
     576:	b6 94       	lsr	r11
     578:	a7 94       	ror	r10
     57a:	97 94       	ror	r9
     57c:	87 94       	ror	r8
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	a1 f6       	brne	.-88     	; 0x52a <__mulsf3+0xb6>
     582:	2b 89       	ldd	r18, Y+19	; 0x13
     584:	3c 89       	ldd	r19, Y+20	; 0x14
     586:	eb 85       	ldd	r30, Y+11	; 0x0b
     588:	fc 85       	ldd	r31, Y+12	; 0x0c
     58a:	2e 0f       	add	r18, r30
     58c:	3f 1f       	adc	r19, r31
     58e:	2e 5f       	subi	r18, 0xFE	; 254
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	3c 83       	std	Y+4, r19	; 0x04
     594:	2b 83       	std	Y+3, r18	; 0x03
     596:	21 e0       	ldi	r18, 0x01	; 1
     598:	ea 89       	ldd	r30, Y+18	; 0x12
     59a:	3a 85       	ldd	r19, Y+10	; 0x0a
     59c:	e3 13       	cpse	r30, r19
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <__mulsf3+0x12e>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	2a 83       	std	Y+2, r18	; 0x02
     5a4:	eb 81       	ldd	r30, Y+3	; 0x03
     5a6:	fc 81       	ldd	r31, Y+4	; 0x04
     5a8:	0c c0       	rjmp	.+24     	; 0x5c2 <__mulsf3+0x14e>
     5aa:	80 ff       	sbrs	r24, 0
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <__mulsf3+0x144>
     5ae:	76 95       	lsr	r23
     5b0:	67 95       	ror	r22
     5b2:	57 95       	ror	r21
     5b4:	47 95       	ror	r20
     5b6:	70 68       	ori	r23, 0x80	; 128
     5b8:	b6 95       	lsr	r27
     5ba:	a7 95       	ror	r26
     5bc:	97 95       	ror	r25
     5be:	87 95       	ror	r24
     5c0:	31 96       	adiw	r30, 0x01	; 1
     5c2:	b7 fd       	sbrc	r27, 7
     5c4:	f2 cf       	rjmp	.-28     	; 0x5aa <__mulsf3+0x136>
     5c6:	9f 01       	movw	r18, r30
     5c8:	0c c0       	rjmp	.+24     	; 0x5e2 <__mulsf3+0x16e>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	aa 1f       	adc	r26, r26
     5d0:	bb 1f       	adc	r27, r27
     5d2:	77 fd       	sbrc	r23, 7
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	44 0f       	add	r20, r20
     5d8:	55 1f       	adc	r21, r21
     5da:	66 1f       	adc	r22, r22
     5dc:	77 1f       	adc	r23, r23
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	31 09       	sbc	r19, r1
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	a1 05       	cpc	r26, r1
     5e6:	e0 e4       	ldi	r30, 0x40	; 64
     5e8:	be 07       	cpc	r27, r30
     5ea:	78 f3       	brcs	.-34     	; 0x5ca <__mulsf3+0x156>
     5ec:	2b 83       	std	Y+3, r18	; 0x03
     5ee:	3c 83       	std	Y+4, r19	; 0x04
     5f0:	8c 01       	movw	r16, r24
     5f2:	9d 01       	movw	r18, r26
     5f4:	0f 77       	andi	r16, 0x7F	; 127
     5f6:	11 27       	eor	r17, r17
     5f8:	22 27       	eor	r18, r18
     5fa:	33 27       	eor	r19, r19
     5fc:	00 34       	cpi	r16, 0x40	; 64
     5fe:	11 05       	cpc	r17, r1
     600:	21 05       	cpc	r18, r1
     602:	31 05       	cpc	r19, r1
     604:	59 f4       	brne	.+22     	; 0x61c <__mulsf3+0x1a8>
     606:	87 fd       	sbrc	r24, 7
     608:	09 c0       	rjmp	.+18     	; 0x61c <__mulsf3+0x1a8>
     60a:	45 2b       	or	r20, r21
     60c:	46 2b       	or	r20, r22
     60e:	47 2b       	or	r20, r23
     610:	29 f0       	breq	.+10     	; 0x61c <__mulsf3+0x1a8>
     612:	80 5c       	subi	r24, 0xC0	; 192
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	af 4f       	sbci	r26, 0xFF	; 255
     618:	bf 4f       	sbci	r27, 0xFF	; 255
     61a:	80 78       	andi	r24, 0x80	; 128
     61c:	8d 83       	std	Y+5, r24	; 0x05
     61e:	9e 83       	std	Y+6, r25	; 0x06
     620:	af 83       	std	Y+7, r26	; 0x07
     622:	b8 87       	std	Y+8, r27	; 0x08
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	89 83       	std	Y+1, r24	; 0x01
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	02 c0       	rjmp	.+4      	; 0x632 <__mulsf3+0x1be>
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__pack_f>
     636:	a0 96       	adiw	r28, 0x20	; 32
     638:	e0 e1       	ldi	r30, 0x10	; 16
     63a:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__epilogue_restores__+0x4>

0000063e <__gtsf2>:
     63e:	a8 e1       	ldi	r26, 0x18	; 24
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e5 e2       	ldi	r30, 0x25	; 37
     644:	f3 e0       	ldi	r31, 0x03	; 3
     646:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__prologue_saves__+0x20>
     64a:	6d 8b       	std	Y+21, r22	; 0x15
     64c:	7e 8b       	std	Y+22, r23	; 0x16
     64e:	8f 8b       	std	Y+23, r24	; 0x17
     650:	98 8f       	std	Y+24, r25	; 0x18
     652:	29 8b       	std	Y+17, r18	; 0x11
     654:	3a 8b       	std	Y+18, r19	; 0x12
     656:	4b 8b       	std	Y+19, r20	; 0x13
     658:	5c 8b       	std	Y+20, r21	; 0x14
     65a:	be 01       	movw	r22, r28
     65c:	67 5f       	subi	r22, 0xF7	; 247
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	ce 01       	movw	r24, r28
     662:	45 96       	adiw	r24, 0x15	; 21
     664:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     668:	be 01       	movw	r22, r28
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	ce 01       	movw	r24, r28
     670:	41 96       	adiw	r24, 0x11	; 17
     672:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     676:	89 85       	ldd	r24, Y+9	; 0x09
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	58 f0       	brcs	.+22     	; 0x692 <__gtsf2+0x54>
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	40 f0       	brcs	.+16     	; 0x692 <__gtsf2+0x54>
     682:	be 01       	movw	r22, r28
     684:	6f 5f       	subi	r22, 0xFF	; 255
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	ce 01       	movw	r24, r28
     68a:	09 96       	adiw	r24, 0x09	; 9
     68c:	0e 94 34 05 	call	0xa68	; 0xa68 <__fpcmp_parts_f>
     690:	01 c0       	rjmp	.+2      	; 0x694 <__gtsf2+0x56>
     692:	8f ef       	ldi	r24, 0xFF	; 255
     694:	68 96       	adiw	r28, 0x18	; 24
     696:	e2 e0       	ldi	r30, 0x02	; 2
     698:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__epilogue_restores__+0x20>

0000069c <__gesf2>:
     69c:	a8 e1       	ldi	r26, 0x18	; 24
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	e4 e5       	ldi	r30, 0x54	; 84
     6a2:	f3 e0       	ldi	r31, 0x03	; 3
     6a4:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__prologue_saves__+0x20>
     6a8:	6d 8b       	std	Y+21, r22	; 0x15
     6aa:	7e 8b       	std	Y+22, r23	; 0x16
     6ac:	8f 8b       	std	Y+23, r24	; 0x17
     6ae:	98 8f       	std	Y+24, r25	; 0x18
     6b0:	29 8b       	std	Y+17, r18	; 0x11
     6b2:	3a 8b       	std	Y+18, r19	; 0x12
     6b4:	4b 8b       	std	Y+19, r20	; 0x13
     6b6:	5c 8b       	std	Y+20, r21	; 0x14
     6b8:	be 01       	movw	r22, r28
     6ba:	67 5f       	subi	r22, 0xF7	; 247
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	ce 01       	movw	r24, r28
     6c0:	45 96       	adiw	r24, 0x15	; 21
     6c2:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     6c6:	be 01       	movw	r22, r28
     6c8:	6f 5f       	subi	r22, 0xFF	; 255
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	41 96       	adiw	r24, 0x11	; 17
     6d0:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     6d4:	89 85       	ldd	r24, Y+9	; 0x09
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	58 f0       	brcs	.+22     	; 0x6f0 <__gesf2+0x54>
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	40 f0       	brcs	.+16     	; 0x6f0 <__gesf2+0x54>
     6e0:	be 01       	movw	r22, r28
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	ce 01       	movw	r24, r28
     6e8:	09 96       	adiw	r24, 0x09	; 9
     6ea:	0e 94 34 05 	call	0xa68	; 0xa68 <__fpcmp_parts_f>
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <__gesf2+0x56>
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	68 96       	adiw	r28, 0x18	; 24
     6f4:	e2 e0       	ldi	r30, 0x02	; 2
     6f6:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__epilogue_restores__+0x20>

000006fa <__ltsf2>:
     6fa:	a8 e1       	ldi	r26, 0x18	; 24
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	e3 e8       	ldi	r30, 0x83	; 131
     700:	f3 e0       	ldi	r31, 0x03	; 3
     702:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__prologue_saves__+0x20>
     706:	6d 8b       	std	Y+21, r22	; 0x15
     708:	7e 8b       	std	Y+22, r23	; 0x16
     70a:	8f 8b       	std	Y+23, r24	; 0x17
     70c:	98 8f       	std	Y+24, r25	; 0x18
     70e:	29 8b       	std	Y+17, r18	; 0x11
     710:	3a 8b       	std	Y+18, r19	; 0x12
     712:	4b 8b       	std	Y+19, r20	; 0x13
     714:	5c 8b       	std	Y+20, r21	; 0x14
     716:	be 01       	movw	r22, r28
     718:	67 5f       	subi	r22, 0xF7	; 247
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	ce 01       	movw	r24, r28
     71e:	45 96       	adiw	r24, 0x15	; 21
     720:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     724:	be 01       	movw	r22, r28
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	ce 01       	movw	r24, r28
     72c:	41 96       	adiw	r24, 0x11	; 17
     72e:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	58 f0       	brcs	.+22     	; 0x74e <__ltsf2+0x54>
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	40 f0       	brcs	.+16     	; 0x74e <__ltsf2+0x54>
     73e:	be 01       	movw	r22, r28
     740:	6f 5f       	subi	r22, 0xFF	; 255
     742:	7f 4f       	sbci	r23, 0xFF	; 255
     744:	ce 01       	movw	r24, r28
     746:	09 96       	adiw	r24, 0x09	; 9
     748:	0e 94 34 05 	call	0xa68	; 0xa68 <__fpcmp_parts_f>
     74c:	01 c0       	rjmp	.+2      	; 0x750 <__ltsf2+0x56>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	68 96       	adiw	r28, 0x18	; 24
     752:	e2 e0       	ldi	r30, 0x02	; 2
     754:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__epilogue_restores__+0x20>

00000758 <__fixsfsi>:
     758:	ac e0       	ldi	r26, 0x0C	; 12
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	e2 eb       	ldi	r30, 0xB2	; 178
     75e:	f3 e0       	ldi	r31, 0x03	; 3
     760:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__prologue_saves__+0x1c>
     764:	69 87       	std	Y+9, r22	; 0x09
     766:	7a 87       	std	Y+10, r23	; 0x0a
     768:	8b 87       	std	Y+11, r24	; 0x0b
     76a:	9c 87       	std	Y+12, r25	; 0x0c
     76c:	be 01       	movw	r22, r28
     76e:	6f 5f       	subi	r22, 0xFF	; 255
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	ce 01       	movw	r24, r28
     774:	09 96       	adiw	r24, 0x09	; 9
     776:	0e 94 c5 04 	call	0x98a	; 0x98a <__unpack_f>
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	91 f1       	breq	.+100    	; 0x7e4 <__fixsfsi+0x8c>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	80 f1       	brcs	.+96     	; 0x7e4 <__fixsfsi+0x8c>
     784:	84 30       	cpi	r24, 0x04	; 4
     786:	41 f4       	brne	.+16     	; 0x798 <__fixsfsi+0x40>
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	88 23       	and	r24, r24
     78c:	31 f1       	breq	.+76     	; 0x7da <__fixsfsi+0x82>
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e8       	ldi	r19, 0x80	; 128
     796:	29 c0       	rjmp	.+82     	; 0x7ea <__fixsfsi+0x92>
     798:	2b 81       	ldd	r18, Y+3	; 0x03
     79a:	3c 81       	ldd	r19, Y+4	; 0x04
     79c:	37 fd       	sbrc	r19, 7
     79e:	22 c0       	rjmp	.+68     	; 0x7e4 <__fixsfsi+0x8c>
     7a0:	2f 31       	cpi	r18, 0x1F	; 31
     7a2:	31 05       	cpc	r19, r1
     7a4:	8c f7       	brge	.-30     	; 0x788 <__fixsfsi+0x30>
     7a6:	8e e1       	ldi	r24, 0x1E	; 30
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	82 1b       	sub	r24, r18
     7ac:	93 0b       	sbc	r25, r19
     7ae:	0d 81       	ldd	r16, Y+5	; 0x05
     7b0:	1e 81       	ldd	r17, Y+6	; 0x06
     7b2:	2f 81       	ldd	r18, Y+7	; 0x07
     7b4:	38 85       	ldd	r19, Y+8	; 0x08
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <__fixsfsi+0x68>
     7b8:	36 95       	lsr	r19
     7ba:	27 95       	ror	r18
     7bc:	17 95       	ror	r17
     7be:	07 95       	ror	r16
     7c0:	8a 95       	dec	r24
     7c2:	d2 f7       	brpl	.-12     	; 0x7b8 <__fixsfsi+0x60>
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	88 23       	and	r24, r24
     7c8:	81 f0       	breq	.+32     	; 0x7ea <__fixsfsi+0x92>
     7ca:	30 95       	com	r19
     7cc:	20 95       	com	r18
     7ce:	10 95       	com	r17
     7d0:	01 95       	neg	r16
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	2f 4f       	sbci	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	08 c0       	rjmp	.+16     	; 0x7ea <__fixsfsi+0x92>
     7da:	0f ef       	ldi	r16, 0xFF	; 255
     7dc:	1f ef       	ldi	r17, 0xFF	; 255
     7de:	2f ef       	ldi	r18, 0xFF	; 255
     7e0:	3f e7       	ldi	r19, 0x7F	; 127
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <__fixsfsi+0x92>
     7e4:	00 e0       	ldi	r16, 0x00	; 0
     7e6:	10 e0       	ldi	r17, 0x00	; 0
     7e8:	98 01       	movw	r18, r16
     7ea:	b8 01       	movw	r22, r16
     7ec:	c9 01       	movw	r24, r18
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e4 e0       	ldi	r30, 0x04	; 4
     7f2:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__epilogue_restores__+0x1c>

000007f6 <__pack_f>:
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	dc 01       	movw	r26, r24
     800:	14 96       	adiw	r26, 0x04	; 4
     802:	4d 91       	ld	r20, X+
     804:	5d 91       	ld	r21, X+
     806:	6d 91       	ld	r22, X+
     808:	7c 91       	ld	r23, X
     80a:	17 97       	sbiw	r26, 0x07	; 7
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	ec 91       	ld	r30, X
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	8c 91       	ld	r24, X
     814:	82 30       	cpi	r24, 0x02	; 2
     816:	20 f4       	brcc	.+8      	; 0x820 <__pack_f+0x2a>
     818:	60 61       	ori	r22, 0x10	; 16
     81a:	8f ef       	ldi	r24, 0xFF	; 255
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a6 c0       	rjmp	.+332    	; 0x96c <__pack_f+0x176>
     820:	84 30       	cpi	r24, 0x04	; 4
     822:	09 f4       	brne	.+2      	; 0x826 <__pack_f+0x30>
     824:	9e c0       	rjmp	.+316    	; 0x962 <__pack_f+0x16c>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	09 f4       	brne	.+2      	; 0x82c <__pack_f+0x36>
     82a:	95 c0       	rjmp	.+298    	; 0x956 <__pack_f+0x160>
     82c:	41 15       	cp	r20, r1
     82e:	51 05       	cpc	r21, r1
     830:	61 05       	cpc	r22, r1
     832:	71 05       	cpc	r23, r1
     834:	09 f4       	brne	.+2      	; 0x838 <__pack_f+0x42>
     836:	92 c0       	rjmp	.+292    	; 0x95c <__pack_f+0x166>
     838:	12 96       	adiw	r26, 0x02	; 2
     83a:	2d 91       	ld	r18, X+
     83c:	3c 91       	ld	r19, X
     83e:	13 97       	sbiw	r26, 0x03	; 3
     840:	22 38       	cpi	r18, 0x82	; 130
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	38 07       	cpc	r19, r24
     846:	0c f0       	brlt	.+2      	; 0x84a <__pack_f+0x54>
     848:	58 c0       	rjmp	.+176    	; 0x8fa <__pack_f+0x104>
     84a:	c2 e8       	ldi	r28, 0x82	; 130
     84c:	df ef       	ldi	r29, 0xFF	; 255
     84e:	c2 1b       	sub	r28, r18
     850:	d3 0b       	sbc	r29, r19
     852:	ca 31       	cpi	r28, 0x1A	; 26
     854:	d1 05       	cpc	r29, r1
     856:	6c f5       	brge	.+90     	; 0x8b2 <__pack_f+0xbc>
     858:	8a 01       	movw	r16, r20
     85a:	9b 01       	movw	r18, r22
     85c:	0c 2e       	mov	r0, r28
     85e:	04 c0       	rjmp	.+8      	; 0x868 <__pack_f+0x72>
     860:	36 95       	lsr	r19
     862:	27 95       	ror	r18
     864:	17 95       	ror	r17
     866:	07 95       	ror	r16
     868:	0a 94       	dec	r0
     86a:	d2 f7       	brpl	.-12     	; 0x860 <__pack_f+0x6a>
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a0 e0       	ldi	r26, 0x00	; 0
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	0c 2e       	mov	r0, r28
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x8a>
     878:	88 0f       	add	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	aa 1f       	adc	r26, r26
     87e:	bb 1f       	adc	r27, r27
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x82>
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	a1 09       	sbc	r26, r1
     888:	b1 09       	sbc	r27, r1
     88a:	84 23       	and	r24, r20
     88c:	95 23       	and	r25, r21
     88e:	a6 23       	and	r26, r22
     890:	b7 23       	and	r27, r23
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	89 2b       	or	r24, r25
     89c:	8a 2b       	or	r24, r26
     89e:	8b 2b       	or	r24, r27
     8a0:	19 f4       	brne	.+6      	; 0x8a8 <__pack_f+0xb2>
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	ba 01       	movw	r22, r20
     8a8:	40 2b       	or	r20, r16
     8aa:	51 2b       	or	r21, r17
     8ac:	62 2b       	or	r22, r18
     8ae:	73 2b       	or	r23, r19
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <__pack_f+0xc2>
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	ba 01       	movw	r22, r20
     8b8:	db 01       	movw	r26, r22
     8ba:	ca 01       	movw	r24, r20
     8bc:	8f 77       	andi	r24, 0x7F	; 127
     8be:	99 27       	eor	r25, r25
     8c0:	aa 27       	eor	r26, r26
     8c2:	bb 27       	eor	r27, r27
     8c4:	80 34       	cpi	r24, 0x40	; 64
     8c6:	91 05       	cpc	r25, r1
     8c8:	a1 05       	cpc	r26, r1
     8ca:	b1 05       	cpc	r27, r1
     8cc:	39 f4       	brne	.+14     	; 0x8dc <__pack_f+0xe6>
     8ce:	47 ff       	sbrs	r20, 7
     8d0:	09 c0       	rjmp	.+18     	; 0x8e4 <__pack_f+0xee>
     8d2:	40 5c       	subi	r20, 0xC0	; 192
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	6f 4f       	sbci	r22, 0xFF	; 255
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <__pack_f+0xee>
     8dc:	41 5c       	subi	r20, 0xC1	; 193
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	6f 4f       	sbci	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	41 15       	cp	r20, r1
     8ea:	51 05       	cpc	r21, r1
     8ec:	61 05       	cpc	r22, r1
     8ee:	20 e4       	ldi	r18, 0x40	; 64
     8f0:	72 07       	cpc	r23, r18
     8f2:	48 f5       	brcc	.+82     	; 0x946 <__pack_f+0x150>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	26 c0       	rjmp	.+76     	; 0x946 <__pack_f+0x150>
     8fa:	20 38       	cpi	r18, 0x80	; 128
     8fc:	31 05       	cpc	r19, r1
     8fe:	8c f5       	brge	.+98     	; 0x962 <__pack_f+0x16c>
     900:	db 01       	movw	r26, r22
     902:	ca 01       	movw	r24, r20
     904:	8f 77       	andi	r24, 0x7F	; 127
     906:	99 27       	eor	r25, r25
     908:	aa 27       	eor	r26, r26
     90a:	bb 27       	eor	r27, r27
     90c:	80 34       	cpi	r24, 0x40	; 64
     90e:	91 05       	cpc	r25, r1
     910:	a1 05       	cpc	r26, r1
     912:	b1 05       	cpc	r27, r1
     914:	39 f4       	brne	.+14     	; 0x924 <__pack_f+0x12e>
     916:	47 ff       	sbrs	r20, 7
     918:	09 c0       	rjmp	.+18     	; 0x92c <__pack_f+0x136>
     91a:	40 5c       	subi	r20, 0xC0	; 192
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	6f 4f       	sbci	r22, 0xFF	; 255
     920:	7f 4f       	sbci	r23, 0xFF	; 255
     922:	04 c0       	rjmp	.+8      	; 0x92c <__pack_f+0x136>
     924:	41 5c       	subi	r20, 0xC1	; 193
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	6f 4f       	sbci	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	77 fd       	sbrc	r23, 7
     92e:	04 c0       	rjmp	.+8      	; 0x938 <__pack_f+0x142>
     930:	c9 01       	movw	r24, r18
     932:	81 58       	subi	r24, 0x81	; 129
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	07 c0       	rjmp	.+14     	; 0x946 <__pack_f+0x150>
     938:	76 95       	lsr	r23
     93a:	67 95       	ror	r22
     93c:	57 95       	ror	r21
     93e:	47 95       	ror	r20
     940:	c9 01       	movw	r24, r18
     942:	80 58       	subi	r24, 0x80	; 128
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	97 e0       	ldi	r25, 0x07	; 7
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	57 95       	ror	r21
     94e:	47 95       	ror	r20
     950:	9a 95       	dec	r25
     952:	d1 f7       	brne	.-12     	; 0x948 <__pack_f+0x152>
     954:	0b c0       	rjmp	.+22     	; 0x96c <__pack_f+0x176>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x170>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	05 c0       	rjmp	.+10     	; 0x96c <__pack_f+0x176>
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	ba 01       	movw	r22, r20
     96c:	98 2f       	mov	r25, r24
     96e:	96 95       	lsr	r25
     970:	e0 fb       	bst	r30, 0
     972:	97 f9       	bld	r25, 7
     974:	36 2f       	mov	r19, r22
     976:	80 fb       	bst	r24, 0
     978:	37 f9       	bld	r19, 7
     97a:	64 2f       	mov	r22, r20
     97c:	75 2f       	mov	r23, r21
     97e:	83 2f       	mov	r24, r19
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	08 95       	ret

0000098a <__unpack_f>:
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	dc 01       	movw	r26, r24
     992:	fb 01       	movw	r30, r22
     994:	cc 90       	ld	r12, X
     996:	11 96       	adiw	r26, 0x01	; 1
     998:	dc 90       	ld	r13, X
     99a:	11 97       	sbiw	r26, 0x01	; 1
     99c:	12 96       	adiw	r26, 0x02	; 2
     99e:	8c 91       	ld	r24, X
     9a0:	12 97       	sbiw	r26, 0x02	; 2
     9a2:	3f e7       	ldi	r19, 0x7F	; 127
     9a4:	e3 2e       	mov	r14, r19
     9a6:	e8 22       	and	r14, r24
     9a8:	6e 2d       	mov	r22, r14
     9aa:	a6 01       	movw	r20, r12
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	98 2f       	mov	r25, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	99 27       	eor	r25, r25
     9b4:	99 1f       	adc	r25, r25
     9b6:	13 96       	adiw	r26, 0x03	; 3
     9b8:	2c 91       	ld	r18, X
     9ba:	82 2f       	mov	r24, r18
     9bc:	88 0f       	add	r24, r24
     9be:	89 2b       	or	r24, r25
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	27 fb       	bst	r18, 7
     9c4:	22 27       	eor	r18, r18
     9c6:	20 f9       	bld	r18, 0
     9c8:	21 83       	std	Z+1, r18	; 0x01
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	29 f5       	brne	.+74     	; 0xa18 <__unpack_f+0x8e>
     9ce:	41 15       	cp	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	61 05       	cpc	r22, r1
     9d4:	71 05       	cpc	r23, r1
     9d6:	11 f4       	brne	.+4      	; 0x9dc <__unpack_f+0x52>
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	27 c0       	rjmp	.+78     	; 0xa2a <__unpack_f+0xa0>
     9dc:	82 e8       	ldi	r24, 0x82	; 130
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	93 83       	std	Z+3, r25	; 0x03
     9e2:	82 83       	std	Z+2, r24	; 0x02
     9e4:	27 e0       	ldi	r18, 0x07	; 7
     9e6:	44 0f       	add	r20, r20
     9e8:	55 1f       	adc	r21, r21
     9ea:	66 1f       	adc	r22, r22
     9ec:	77 1f       	adc	r23, r23
     9ee:	2a 95       	dec	r18
     9f0:	d1 f7       	brne	.-12     	; 0x9e6 <__unpack_f+0x5c>
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	80 83       	st	Z, r24
     9f6:	09 c0       	rjmp	.+18     	; 0xa0a <__unpack_f+0x80>
     9f8:	44 0f       	add	r20, r20
     9fa:	55 1f       	adc	r21, r21
     9fc:	66 1f       	adc	r22, r22
     9fe:	77 1f       	adc	r23, r23
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	93 83       	std	Z+3, r25	; 0x03
     a08:	82 83       	std	Z+2, r24	; 0x02
     a0a:	41 15       	cp	r20, r1
     a0c:	51 05       	cpc	r21, r1
     a0e:	61 05       	cpc	r22, r1
     a10:	80 e4       	ldi	r24, 0x40	; 64
     a12:	78 07       	cpc	r23, r24
     a14:	88 f3       	brcs	.-30     	; 0x9f8 <__unpack_f+0x6e>
     a16:	20 c0       	rjmp	.+64     	; 0xa58 <__unpack_f+0xce>
     a18:	8f 3f       	cpi	r24, 0xFF	; 255
     a1a:	91 05       	cpc	r25, r1
     a1c:	79 f4       	brne	.+30     	; 0xa3c <__unpack_f+0xb2>
     a1e:	41 15       	cp	r20, r1
     a20:	51 05       	cpc	r21, r1
     a22:	61 05       	cpc	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__unpack_f+0xa4>
     a28:	84 e0       	ldi	r24, 0x04	; 4
     a2a:	80 83       	st	Z, r24
     a2c:	19 c0       	rjmp	.+50     	; 0xa60 <__unpack_f+0xd6>
     a2e:	e4 fe       	sbrs	r14, 4
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <__unpack_f+0xae>
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 83       	st	Z, r24
     a36:	10 c0       	rjmp	.+32     	; 0xa58 <__unpack_f+0xce>
     a38:	10 82       	st	Z, r1
     a3a:	0e c0       	rjmp	.+28     	; 0xa58 <__unpack_f+0xce>
     a3c:	8f 57       	subi	r24, 0x7F	; 127
     a3e:	91 09       	sbc	r25, r1
     a40:	93 83       	std	Z+3, r25	; 0x03
     a42:	82 83       	std	Z+2, r24	; 0x02
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	80 83       	st	Z, r24
     a48:	87 e0       	ldi	r24, 0x07	; 7
     a4a:	44 0f       	add	r20, r20
     a4c:	55 1f       	adc	r21, r21
     a4e:	66 1f       	adc	r22, r22
     a50:	77 1f       	adc	r23, r23
     a52:	8a 95       	dec	r24
     a54:	d1 f7       	brne	.-12     	; 0xa4a <__unpack_f+0xc0>
     a56:	70 64       	ori	r23, 0x40	; 64
     a58:	44 83       	std	Z+4, r20	; 0x04
     a5a:	55 83       	std	Z+5, r21	; 0x05
     a5c:	66 83       	std	Z+6, r22	; 0x06
     a5e:	77 83       	std	Z+7, r23	; 0x07
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	08 95       	ret

00000a68 <__fpcmp_parts_f>:
     a68:	cf 93       	push	r28
     a6a:	fc 01       	movw	r30, r24
     a6c:	db 01       	movw	r26, r22
     a6e:	90 81       	ld	r25, Z
     a70:	92 30       	cpi	r25, 0x02	; 2
     a72:	08 f4       	brcc	.+2      	; 0xa76 <__fpcmp_parts_f+0xe>
     a74:	52 c0       	rjmp	.+164    	; 0xb1a <__fpcmp_parts_f+0xb2>
     a76:	8c 91       	ld	r24, X
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	08 f4       	brcc	.+2      	; 0xa7e <__fpcmp_parts_f+0x16>
     a7c:	4e c0       	rjmp	.+156    	; 0xb1a <__fpcmp_parts_f+0xb2>
     a7e:	94 30       	cpi	r25, 0x04	; 4
     a80:	71 f4       	brne	.+28     	; 0xa9e <__fpcmp_parts_f+0x36>
     a82:	84 30       	cpi	r24, 0x04	; 4
     a84:	39 f4       	brne	.+14     	; 0xa94 <__fpcmp_parts_f+0x2c>
     a86:	11 96       	adiw	r26, 0x01	; 1
     a88:	2c 91       	ld	r18, X
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	81 81       	ldd	r24, Z+1	; 0x01
     a8e:	28 1b       	sub	r18, r24
     a90:	31 09       	sbc	r19, r1
     a92:	48 c0       	rjmp	.+144    	; 0xb24 <__fpcmp_parts_f+0xbc>
     a94:	81 81       	ldd	r24, Z+1	; 0x01
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <__fpcmp_parts_f+0x34>
     a9a:	3f c0       	rjmp	.+126    	; 0xb1a <__fpcmp_parts_f+0xb2>
     a9c:	3b c0       	rjmp	.+118    	; 0xb14 <__fpcmp_parts_f+0xac>
     a9e:	84 30       	cpi	r24, 0x04	; 4
     aa0:	29 f4       	brne	.+10     	; 0xaac <__fpcmp_parts_f+0x44>
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	8c 91       	ld	r24, X
     aa6:	81 11       	cpse	r24, r1
     aa8:	38 c0       	rjmp	.+112    	; 0xb1a <__fpcmp_parts_f+0xb2>
     aaa:	34 c0       	rjmp	.+104    	; 0xb14 <__fpcmp_parts_f+0xac>
     aac:	92 30       	cpi	r25, 0x02	; 2
     aae:	19 f4       	brne	.+6      	; 0xab6 <__fpcmp_parts_f+0x4e>
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	b9 f7       	brne	.-18     	; 0xaa2 <__fpcmp_parts_f+0x3a>
     ab4:	35 c0       	rjmp	.+106    	; 0xb20 <__fpcmp_parts_f+0xb8>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	69 f3       	breq	.-38     	; 0xa94 <__fpcmp_parts_f+0x2c>
     aba:	c1 81       	ldd	r28, Z+1	; 0x01
     abc:	11 96       	adiw	r26, 0x01	; 1
     abe:	8c 91       	ld	r24, X
     ac0:	11 97       	sbiw	r26, 0x01	; 1
     ac2:	c8 13       	cpse	r28, r24
     ac4:	1d c0       	rjmp	.+58     	; 0xb00 <__fpcmp_parts_f+0x98>
     ac6:	22 81       	ldd	r18, Z+2	; 0x02
     ac8:	33 81       	ldd	r19, Z+3	; 0x03
     aca:	12 96       	adiw	r26, 0x02	; 2
     acc:	8d 91       	ld	r24, X+
     ace:	9c 91       	ld	r25, X
     ad0:	13 97       	sbiw	r26, 0x03	; 3
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	0c f4       	brge	.+2      	; 0xada <__fpcmp_parts_f+0x72>
     ad8:	13 c0       	rjmp	.+38     	; 0xb00 <__fpcmp_parts_f+0x98>
     ada:	28 17       	cp	r18, r24
     adc:	39 07       	cpc	r19, r25
     ade:	0c f4       	brge	.+2      	; 0xae2 <__fpcmp_parts_f+0x7a>
     ae0:	17 c0       	rjmp	.+46     	; 0xb10 <__fpcmp_parts_f+0xa8>
     ae2:	44 81       	ldd	r20, Z+4	; 0x04
     ae4:	55 81       	ldd	r21, Z+5	; 0x05
     ae6:	66 81       	ldd	r22, Z+6	; 0x06
     ae8:	77 81       	ldd	r23, Z+7	; 0x07
     aea:	14 96       	adiw	r26, 0x04	; 4
     aec:	8d 91       	ld	r24, X+
     aee:	9d 91       	ld	r25, X+
     af0:	0d 90       	ld	r0, X+
     af2:	bc 91       	ld	r27, X
     af4:	a0 2d       	mov	r26, r0
     af6:	84 17       	cp	r24, r20
     af8:	95 07       	cpc	r25, r21
     afa:	a6 07       	cpc	r26, r22
     afc:	b7 07       	cpc	r27, r23
     afe:	18 f4       	brcc	.+6      	; 0xb06 <__fpcmp_parts_f+0x9e>
     b00:	c1 11       	cpse	r28, r1
     b02:	08 c0       	rjmp	.+16     	; 0xb14 <__fpcmp_parts_f+0xac>
     b04:	0a c0       	rjmp	.+20     	; 0xb1a <__fpcmp_parts_f+0xb2>
     b06:	48 17       	cp	r20, r24
     b08:	59 07       	cpc	r21, r25
     b0a:	6a 07       	cpc	r22, r26
     b0c:	7b 07       	cpc	r23, r27
     b0e:	40 f4       	brcc	.+16     	; 0xb20 <__fpcmp_parts_f+0xb8>
     b10:	c1 11       	cpse	r28, r1
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <__fpcmp_parts_f+0xb2>
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	3f ef       	ldi	r19, 0xFF	; 255
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <__fpcmp_parts_f+0xbc>
     b1a:	21 e0       	ldi	r18, 0x01	; 1
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <__fpcmp_parts_f+0xbc>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	c9 01       	movw	r24, r18
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <_delayFourCycles+0x6>
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	9a 83       	std	Y+2, r25	; 0x02
     b36:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	11 f4       	brne	.+4      	; 0xb44 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <_delayFourCycles+0x18>
     b42:	06 c0       	rjmp	.+12     	; 0xb50 <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <_delayFourCycles+0x1e>
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
     b62:	82 e2       	ldi	r24, 0x22	; 34
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	22 e2       	ldi	r18, 0x22	; 34
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	f9 01       	movw	r30, r18
     b6c:	20 81       	ld	r18, Z
     b6e:	20 61       	ori	r18, 0x10	; 16
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
    lcd_e_delay();
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <toggle_e+0x1c>
    lcd_e_low();
     b76:	82 e2       	ldi	r24, 0x22	; 34
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	22 e2       	ldi	r18, 0x22	; 34
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	f9 01       	movw	r30, r18
     b80:	20 81       	ld	r18, Z
     b82:	2f 7e       	andi	r18, 0xEF	; 239
     b84:	fc 01       	movw	r30, r24
     b86:	20 83       	st	Z, r18
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	00 d0       	rcall	.+0      	; 0xb94 <lcd_write+0x6>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	6a 83       	std	Y+2, r22	; 0x02
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	88 23       	and	r24, r24
     ba0:	51 f0       	breq	.+20     	; 0xbb6 <lcd_write+0x28>
       lcd_rs_high();
     ba2:	82 e2       	ldi	r24, 0x22	; 34
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	22 e2       	ldi	r18, 0x22	; 34
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	f9 01       	movw	r30, r18
     bac:	20 81       	ld	r18, Z
     bae:	20 64       	ori	r18, 0x40	; 64
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <lcd_write+0x3a>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     bb6:	82 e2       	ldi	r24, 0x22	; 34
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	22 e2       	ldi	r18, 0x22	; 34
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	f9 01       	movw	r30, r18
     bc0:	20 81       	ld	r18, Z
     bc2:	2f 7b       	andi	r18, 0xBF	; 191
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
    }
    lcd_rw_low();
     bc8:	82 e2       	ldi	r24, 0x22	; 34
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	22 e2       	ldi	r18, 0x22	; 34
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	f9 01       	movw	r30, r18
     bd2:	20 81       	ld	r18, Z
     bd4:	2f 7d       	andi	r18, 0xDF	; 223
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     bda:	81 e2       	ldi	r24, 0x21	; 33
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	21 e2       	ldi	r18, 0x21	; 33
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	f9 01       	movw	r30, r18
     be4:	20 81       	ld	r18, Z
     be6:	28 60       	ori	r18, 0x08	; 8
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     bec:	81 e2       	ldi	r24, 0x21	; 33
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	21 e2       	ldi	r18, 0x21	; 33
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	f9 01       	movw	r30, r18
     bf6:	20 81       	ld	r18, Z
     bf8:	24 60       	ori	r18, 0x04	; 4
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     bfe:	81 e2       	ldi	r24, 0x21	; 33
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	21 e2       	ldi	r18, 0x21	; 33
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	f9 01       	movw	r30, r18
     c08:	20 81       	ld	r18, Z
     c0a:	22 60       	ori	r18, 0x02	; 2
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     c10:	81 e2       	ldi	r24, 0x21	; 33
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	21 e2       	ldi	r18, 0x21	; 33
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	f9 01       	movw	r30, r18
     c1a:	20 81       	ld	r18, Z
     c1c:	21 60       	ori	r18, 0x01	; 1
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     c22:	82 e2       	ldi	r24, 0x22	; 34
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	22 e2       	ldi	r18, 0x22	; 34
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	f9 01       	movw	r30, r18
     c2c:	20 81       	ld	r18, Z
     c2e:	2e 7f       	andi	r18, 0xFE	; 254
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     c34:	82 e2       	ldi	r24, 0x22	; 34
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	22 e2       	ldi	r18, 0x22	; 34
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	f9 01       	movw	r30, r18
     c3e:	20 81       	ld	r18, Z
     c40:	2d 7f       	andi	r18, 0xFD	; 253
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     c46:	82 e2       	ldi	r24, 0x22	; 34
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	22 e2       	ldi	r18, 0x22	; 34
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	f9 01       	movw	r30, r18
     c50:	20 81       	ld	r18, Z
     c52:	2b 7f       	andi	r18, 0xFB	; 251
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     c58:	82 e2       	ldi	r24, 0x22	; 34
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	22 e2       	ldi	r18, 0x22	; 34
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	27 7f       	andi	r18, 0xF7	; 247
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	88 23       	and	r24, r24
     c6e:	4c f4       	brge	.+18     	; 0xc82 <lcd_write+0xf4>
     c70:	82 e2       	ldi	r24, 0x22	; 34
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	22 e2       	ldi	r18, 0x22	; 34
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	21 60       	ori	r18, 0x01	; 1
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	80 74       	andi	r24, 0x40	; 64
     c8a:	99 27       	eor	r25, r25
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	49 f0       	breq	.+18     	; 0xca2 <lcd_write+0x114>
     c90:	82 e2       	ldi	r24, 0x22	; 34
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	22 e2       	ldi	r18, 0x22	; 34
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	f9 01       	movw	r30, r18
     c9a:	20 81       	ld	r18, Z
     c9c:	22 60       	ori	r18, 0x02	; 2
     c9e:	fc 01       	movw	r30, r24
     ca0:	20 83       	st	Z, r18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	80 72       	andi	r24, 0x20	; 32
     caa:	99 27       	eor	r25, r25
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	49 f0       	breq	.+18     	; 0xcc2 <lcd_write+0x134>
     cb0:	82 e2       	ldi	r24, 0x22	; 34
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	22 e2       	ldi	r18, 0x22	; 34
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	24 60       	ori	r18, 0x04	; 4
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	80 71       	andi	r24, 0x10	; 16
     cca:	99 27       	eor	r25, r25
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	49 f0       	breq	.+18     	; 0xce2 <lcd_write+0x154>
     cd0:	82 e2       	ldi	r24, 0x22	; 34
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	22 e2       	ldi	r18, 0x22	; 34
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	f9 01       	movw	r30, r18
     cda:	20 81       	ld	r18, Z
     cdc:	28 60       	ori	r18, 0x08	; 8
     cde:	fc 01       	movw	r30, r24
     ce0:	20 83       	st	Z, r18
        lcd_e_toggle();
     ce2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     ce6:	82 e2       	ldi	r24, 0x22	; 34
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	22 e2       	ldi	r18, 0x22	; 34
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	f9 01       	movw	r30, r18
     cf0:	20 81       	ld	r18, Z
     cf2:	2e 7f       	andi	r18, 0xFE	; 254
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     cf8:	82 e2       	ldi	r24, 0x22	; 34
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	22 e2       	ldi	r18, 0x22	; 34
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	2d 7f       	andi	r18, 0xFD	; 253
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     d0a:	82 e2       	ldi	r24, 0x22	; 34
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	22 e2       	ldi	r18, 0x22	; 34
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f9 01       	movw	r30, r18
     d14:	20 81       	ld	r18, Z
     d16:	2b 7f       	andi	r18, 0xFB	; 251
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     d1c:	82 e2       	ldi	r24, 0x22	; 34
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	22 e2       	ldi	r18, 0x22	; 34
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	f9 01       	movw	r30, r18
     d26:	20 81       	ld	r18, Z
     d28:	27 7f       	andi	r18, 0xF7	; 247
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	88 70       	andi	r24, 0x08	; 8
     d36:	99 27       	eor	r25, r25
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	49 f0       	breq	.+18     	; 0xd4e <lcd_write+0x1c0>
     d3c:	82 e2       	ldi	r24, 0x22	; 34
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	22 e2       	ldi	r18, 0x22	; 34
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	f9 01       	movw	r30, r18
     d46:	20 81       	ld	r18, Z
     d48:	21 60       	ori	r18, 0x01	; 1
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	84 70       	andi	r24, 0x04	; 4
     d56:	99 27       	eor	r25, r25
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	49 f0       	breq	.+18     	; 0xd6e <lcd_write+0x1e0>
     d5c:	82 e2       	ldi	r24, 0x22	; 34
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	22 e2       	ldi	r18, 0x22	; 34
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	f9 01       	movw	r30, r18
     d66:	20 81       	ld	r18, Z
     d68:	22 60       	ori	r18, 0x02	; 2
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 83       	st	Z, r18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	82 70       	andi	r24, 0x02	; 2
     d76:	99 27       	eor	r25, r25
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	49 f0       	breq	.+18     	; 0xd8e <lcd_write+0x200>
     d7c:	82 e2       	ldi	r24, 0x22	; 34
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	22 e2       	ldi	r18, 0x22	; 34
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	f9 01       	movw	r30, r18
     d86:	20 81       	ld	r18, Z
     d88:	24 60       	ori	r18, 0x04	; 4
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	81 70       	andi	r24, 0x01	; 1
     d96:	99 27       	eor	r25, r25
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	49 f0       	breq	.+18     	; 0xdae <lcd_write+0x220>
     d9c:	82 e2       	ldi	r24, 0x22	; 34
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	22 e2       	ldi	r18, 0x22	; 34
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	f9 01       	movw	r30, r18
     da6:	20 81       	ld	r18, Z
     da8:	28 60       	ori	r18, 0x08	; 8
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
        lcd_e_toggle();        
     dae:	0e 94 ad 05 	call	0xb5a	; 0xb5a <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     db2:	82 e2       	ldi	r24, 0x22	; 34
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	22 e2       	ldi	r18, 0x22	; 34
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	f9 01       	movw	r30, r18
     dbc:	20 81       	ld	r18, Z
     dbe:	28 60       	ori	r18, 0x08	; 8
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     dc4:	82 e2       	ldi	r24, 0x22	; 34
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	22 e2       	ldi	r18, 0x22	; 34
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	f9 01       	movw	r30, r18
     dce:	20 81       	ld	r18, Z
     dd0:	24 60       	ori	r18, 0x04	; 4
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 83       	st	Z, r18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     dd6:	82 e2       	ldi	r24, 0x22	; 34
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	22 e2       	ldi	r18, 0x22	; 34
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	f9 01       	movw	r30, r18
     de0:	20 81       	ld	r18, Z
     de2:	22 60       	ori	r18, 0x02	; 2
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     de8:	82 e2       	ldi	r24, 0x22	; 34
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	22 e2       	ldi	r18, 0x22	; 34
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	f9 01       	movw	r30, r18
     df2:	20 81       	ld	r18, Z
     df4:	21 60       	ori	r18, 0x01	; 1
     df6:	fc 01       	movw	r30, r24
     df8:	20 83       	st	Z, r18
    }
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	00 d0       	rcall	.+0      	; 0xe0a <lcd_read+0x6>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    
    
    if (rs)
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	88 23       	and	r24, r24
     e14:	51 f0       	breq	.+20     	; 0xe2a <lcd_read+0x26>
        lcd_rs_high();                       /* RS=1: read data      */
     e16:	82 e2       	ldi	r24, 0x22	; 34
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	22 e2       	ldi	r18, 0x22	; 34
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	f9 01       	movw	r30, r18
     e20:	20 81       	ld	r18, Z
     e22:	20 64       	ori	r18, 0x40	; 64
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
     e28:	09 c0       	rjmp	.+18     	; 0xe3c <lcd_read+0x38>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     e2a:	82 e2       	ldi	r24, 0x22	; 34
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	22 e2       	ldi	r18, 0x22	; 34
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	f9 01       	movw	r30, r18
     e34:	20 81       	ld	r18, Z
     e36:	2f 7b       	andi	r18, 0xBF	; 191
     e38:	fc 01       	movw	r30, r24
     e3a:	20 83       	st	Z, r18
    lcd_rw_high();                           /* RW=1  read mode      */
     e3c:	82 e2       	ldi	r24, 0x22	; 34
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	22 e2       	ldi	r18, 0x22	; 34
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	f9 01       	movw	r30, r18
     e46:	20 81       	ld	r18, Z
     e48:	20 62       	ori	r18, 0x20	; 32
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 83       	st	Z, r18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     e4e:	81 e2       	ldi	r24, 0x21	; 33
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	21 e2       	ldi	r18, 0x21	; 33
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	f9 01       	movw	r30, r18
     e58:	20 81       	ld	r18, Z
     e5a:	27 7f       	andi	r18, 0xF7	; 247
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 83       	st	Z, r18
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     e60:	81 e2       	ldi	r24, 0x21	; 33
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	21 e2       	ldi	r18, 0x21	; 33
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	f9 01       	movw	r30, r18
     e6a:	20 81       	ld	r18, Z
     e6c:	2b 7f       	andi	r18, 0xFB	; 251
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     e72:	81 e2       	ldi	r24, 0x21	; 33
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	21 e2       	ldi	r18, 0x21	; 33
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	f9 01       	movw	r30, r18
     e7c:	20 81       	ld	r18, Z
     e7e:	2d 7f       	andi	r18, 0xFD	; 253
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     e84:	81 e2       	ldi	r24, 0x21	; 33
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	21 e2       	ldi	r18, 0x21	; 33
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	f9 01       	movw	r30, r18
     e8e:	20 81       	ld	r18, Z
     e90:	2e 7f       	andi	r18, 0xFE	; 254
     e92:	fc 01       	movw	r30, r24
     e94:	20 83       	st	Z, r18
                
        /* read high nibble first */
        lcd_e_high();
     e96:	82 e2       	ldi	r24, 0x22	; 34
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	22 e2       	ldi	r18, 0x22	; 34
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	f9 01       	movw	r30, r18
     ea0:	20 81       	ld	r18, Z
     ea2:	20 61       	ori	r18, 0x10	; 16
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 83       	st	Z, r18
        lcd_e_delay();        
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <lcd_read+0xa6>
        data = 0;
     eaa:	19 82       	std	Y+1, r1	; 0x01
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     eac:	80 e2       	ldi	r24, 0x20	; 32
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	fc 01       	movw	r30, r24
     eb2:	80 81       	ld	r24, Z
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	88 70       	andi	r24, 0x08	; 8
     eba:	99 27       	eor	r25, r25
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	19 f0       	breq	.+6      	; 0xec6 <lcd_read+0xc2>
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     ec6:	80 e2       	ldi	r24, 0x20	; 32
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	fc 01       	movw	r30, r24
     ecc:	80 81       	ld	r24, Z
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	84 70       	andi	r24, 0x04	; 4
     ed4:	99 27       	eor	r25, r25
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	19 f0       	breq	.+6      	; 0xee0 <lcd_read+0xdc>
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	80 62       	ori	r24, 0x20	; 32
     ede:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	fc 01       	movw	r30, r24
     ee6:	80 81       	ld	r24, Z
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	82 70       	andi	r24, 0x02	; 2
     eee:	99 27       	eor	r25, r25
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	19 f0       	breq	.+6      	; 0xefa <lcd_read+0xf6>
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	80 64       	ori	r24, 0x40	; 64
     ef8:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	99 27       	eor	r25, r25
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	19 f0       	breq	.+6      	; 0xf14 <lcd_read+0x110>
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     f14:	82 e2       	ldi	r24, 0x22	; 34
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	22 e2       	ldi	r18, 0x22	; 34
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	f9 01       	movw	r30, r18
     f1e:	20 81       	ld	r18, Z
     f20:	2f 7e       	andi	r18, 0xEF	; 239
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18

        lcd_e_delay();                       /* Enable 500ns low       */
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <lcd_read+0x124>
    
        /* read low nibble */    
        lcd_e_high();
     f28:	82 e2       	ldi	r24, 0x22	; 34
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	22 e2       	ldi	r18, 0x22	; 34
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	f9 01       	movw	r30, r18
     f32:	20 81       	ld	r18, Z
     f34:	20 61       	ori	r18, 0x10	; 16
     f36:	fc 01       	movw	r30, r24
     f38:	20 83       	st	Z, r18
        lcd_e_delay();
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <lcd_read+0x138>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	fc 01       	movw	r30, r24
     f42:	80 81       	ld	r24, Z
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	88 70       	andi	r24, 0x08	; 8
     f4a:	99 27       	eor	r25, r25
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	19 f0       	breq	.+6      	; 0xf56 <lcd_read+0x152>
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     f56:	80 e2       	ldi	r24, 0x20	; 32
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	fc 01       	movw	r30, r24
     f5c:	80 81       	ld	r24, Z
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	84 70       	andi	r24, 0x04	; 4
     f64:	99 27       	eor	r25, r25
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	19 f0       	breq	.+6      	; 0xf70 <lcd_read+0x16c>
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     f70:	80 e2       	ldi	r24, 0x20	; 32
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	fc 01       	movw	r30, r24
     f76:	80 81       	ld	r24, Z
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	82 70       	andi	r24, 0x02	; 2
     f7e:	99 27       	eor	r25, r25
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	19 f0       	breq	.+6      	; 0xf8a <lcd_read+0x186>
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	84 60       	ori	r24, 0x04	; 4
     f88:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     f8a:	80 e2       	ldi	r24, 0x20	; 32
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	99 27       	eor	r25, r25
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <lcd_read+0x1a0>
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	88 60       	ori	r24, 0x08	; 8
     fa2:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     fa4:	82 e2       	ldi	r24, 0x22	; 34
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	22 e2       	ldi	r18, 0x22	; 34
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	f9 01       	movw	r30, r18
     fae:	20 81       	ld	r18, Z
     fb0:	2f 7e       	andi	r18, 0xEF	; 239
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 83       	st	Z, r18
    }
    return data;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0e 94 02 07 	call	0xe04	; 0xe04 <lcd_read>
     fd2:	18 2f       	mov	r17, r24
     fd4:	81 2f       	mov	r24, r17
     fd6:	88 23       	and	r24, r24
     fd8:	cc f3       	brlt	.-14     	; 0xfcc <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 95 05 	call	0xb2a	; 0xb2a <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0e 94 02 07 	call	0xe04	; 0xe04 <lcd_read>
    
}/* lcd_waitbusy */
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	08 95       	ret

00000ff0 <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	1f 92       	push	r1
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	10 f4       	brcc	.+4      	; 0x1008 <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
    1004:	10 e4       	ldi	r17, 0x40	; 64
    1006:	01 c0       	rjmp	.+2      	; 0x100a <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
    1008:	10 e0       	ldi	r17, 0x00	; 0
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    100a:	81 2f       	mov	r24, r17
    100c:	80 58       	subi	r24, 0x80	; 128
    100e:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>

}/* lcd_newline */
    1012:	0f 90       	pop	r0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	08 95       	ret

0000101c <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	1f 92       	push	r1
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
    1028:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <lcd_waitbusy>
    lcd_write(cmd,0);
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	0e 94 c7 05 	call	0xb8e	; 0xb8e <lcd_write>
}
    1034:	0f 90       	pop	r0
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	1f 92       	push	r1
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
    1048:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <lcd_waitbusy>
    lcd_write(data,1);
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	0e 94 c7 05 	call	0xb8e	; 0xb8e <lcd_write>
}
    1054:	0f 90       	pop	r0
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	00 d0       	rcall	.+0      	; 0x1062 <lcd_gotoxy+0x6>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	88 23       	and	r24, r24
    106e:	29 f4       	brne	.+10     	; 0x107a <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	80 58       	subi	r24, 0x80	; 128
    1074:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <lcd_gotoxy+0x26>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	80 54       	subi	r24, 0x40	; 64
    107e:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
    1094:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <lcd_waitbusy>
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <lcd_putc+0x6>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    10d6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <lcd_waitbusy>
    10da:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	8a 30       	cpi	r24, 0x0A	; 10
    10e0:	21 f4       	brne	.+8      	; 0x10ea <lcd_putc+0x20>
    {
        lcd_newline(pos);
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	0e 94 f8 07 	call	0xff0	; 0xff0 <lcd_newline>
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <lcd_putc+0x28>
        else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH )
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	0e 94 c7 05 	call	0xb8e	; 0xb8e <lcd_write>
    }

}/* lcd_putc */
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	08 95       	ret

000010fc <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	00 d0       	rcall	.+0      	; 0x1104 <__stack+0x5>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
    register char c;

    while ( (c = *s++) ) {
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <__stack+0x15>
        lcd_putc(c);
    110e:	81 2f       	mov	r24, r17
    1110:	0e 94 65 08 	call	0x10ca	; 0x10ca <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	fc 01       	movw	r30, r24
    111a:	10 81       	ld	r17, Z
    111c:	21 e0       	ldi	r18, 0x01	; 1
    111e:	11 23       	and	r17, r17
    1120:	09 f4       	brne	.+2      	; 0x1124 <__stack+0x25>
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	22 23       	and	r18, r18
    1130:	71 f7       	brne	.-36     	; 0x110e <__stack+0xf>
        lcd_putc(c);
    }

}/* lcd_puts */
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	08 95       	ret

0000113e <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	00 d0       	rcall	.+0      	; 0x1146 <lcd_puts_p+0x8>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <lcd_puts_p+0xa>
    1148:	1f 92       	push	r1
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	9d 83       	std	Y+5, r25	; 0x05
    1150:	8c 83       	std	Y+4, r24	; 0x04
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
    1152:	03 c0       	rjmp	.+6      	; 0x115a <lcd_puts_p+0x1c>
        lcd_putc(c);
    1154:	81 2f       	mov	r24, r17
    1156:	0e 94 65 08 	call	0x10ca	; 0x10ca <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	9d 83       	std	Y+5, r25	; 0x05
    116a:	8c 83       	std	Y+4, r24	; 0x04
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	fc 01       	movw	r30, r24
    1172:	14 91       	lpm	r17, Z
    1174:	1b 83       	std	Y+3, r17	; 0x03
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	18 2f       	mov	r17, r24
    117a:	11 23       	and	r17, r17
    117c:	59 f7       	brne	.-42     	; 0x1154 <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	08 95       	ret

00001190 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	1f 92       	push	r1
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	89 83       	std	Y+1, r24	; 0x01
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    119c:	81 e2       	ldi	r24, 0x21	; 33
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	21 e2       	ldi	r18, 0x21	; 33
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	f9 01       	movw	r30, r18
    11a6:	20 81       	ld	r18, Z
    11a8:	20 64       	ori	r18, 0x40	; 64
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 83       	st	Z, r18
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    11ae:	81 e2       	ldi	r24, 0x21	; 33
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	21 e2       	ldi	r18, 0x21	; 33
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	20 62       	ori	r18, 0x20	; 32
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    11c0:	81 e2       	ldi	r24, 0x21	; 33
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	21 e2       	ldi	r18, 0x21	; 33
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	f9 01       	movw	r30, r18
    11ca:	20 81       	ld	r18, Z
    11cc:	20 61       	ori	r18, 0x10	; 16
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
    11d2:	81 e2       	ldi	r24, 0x21	; 33
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	21 e2       	ldi	r18, 0x21	; 33
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	f9 01       	movw	r30, r18
    11dc:	20 81       	ld	r18, Z
    11de:	28 60       	ori	r18, 0x08	; 8
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
    11e4:	81 e2       	ldi	r24, 0x21	; 33
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	21 e2       	ldi	r18, 0x21	; 33
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	f9 01       	movw	r30, r18
    11ee:	20 81       	ld	r18, Z
    11f0:	24 60       	ori	r18, 0x04	; 4
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 83       	st	Z, r18
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
    11f6:	81 e2       	ldi	r24, 0x21	; 33
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	21 e2       	ldi	r18, 0x21	; 33
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	f9 01       	movw	r30, r18
    1200:	20 81       	ld	r18, Z
    1202:	22 60       	ori	r18, 0x02	; 2
    1204:	fc 01       	movw	r30, r24
    1206:	20 83       	st	Z, r18
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    1208:	81 e2       	ldi	r24, 0x21	; 33
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	21 e2       	ldi	r18, 0x21	; 33
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	f9 01       	movw	r30, r18
    1212:	20 81       	ld	r18, Z
    1214:	21 60       	ori	r18, 0x01	; 1
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	9e e3       	ldi	r25, 0x3E	; 62
    121e:	0e 94 95 05 	call	0xb2a	; 0xb2a <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    1222:	82 e2       	ldi	r24, 0x22	; 34
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	22 e2       	ldi	r18, 0x22	; 34
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	f9 01       	movw	r30, r18
    122c:	20 81       	ld	r18, Z
    122e:	24 60       	ori	r18, 0x04	; 4
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    1234:	82 e2       	ldi	r24, 0x22	; 34
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	22 e2       	ldi	r18, 0x22	; 34
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	f9 01       	movw	r30, r18
    123e:	20 81       	ld	r18, Z
    1240:	28 60       	ori	r18, 0x08	; 8
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18
    lcd_e_toggle();
    1246:	0e 94 ad 05 	call	0xb5a	; 0xb5a <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
    124a:	80 e8       	ldi	r24, 0x80	; 128
    124c:	93 e1       	ldi	r25, 0x13	; 19
    124e:	0e 94 95 05 	call	0xb2a	; 0xb2a <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
    1252:	0e 94 ad 05 	call	0xb5a	; 0xb5a <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
    1256:	80 e4       	ldi	r24, 0x40	; 64
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 95 05 	call	0xb2a	; 0xb2a <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    125e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
    1262:	80 e4       	ldi	r24, 0x40	; 64
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 95 05 	call	0xb2a	; 0xb2a <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    126a:	82 e2       	ldi	r24, 0x22	; 34
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	22 e2       	ldi	r18, 0x22	; 34
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	f9 01       	movw	r30, r18
    1274:	20 81       	ld	r18, Z
    1276:	27 7f       	andi	r18, 0xF7	; 247
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
    lcd_e_toggle();
    127c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <toggle_e>
    delay(64);           /* some displays need this additional delay */
    1280:	80 e4       	ldi	r24, 0x40	; 64
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 95 05 	call	0xb2a	; 0xb2a <_delayFourCycles>
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    1288:	88 e2       	ldi	r24, 0x28	; 40
    128a:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    128e:	88 e0       	ldi	r24, 0x08	; 8
    1290:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
    1294:	0e 94 51 08 	call	0x10a2	; 0x10a2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1298:	86 e0       	ldi	r24, 0x06	; 6
    129a:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	0e 94 0e 08 	call	0x101c	; 0x101c <lcd_command>

}/* lcd_init */
    12a4:	0f 90       	pop	r0
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <main>:
#include "lcdlibrary/lcd.h"

//zmienne globalne

//funckja glowna
int main(void){
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	6c 97       	sbiw	r28, 0x1c	; 28
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61

	//inicjalizacja sprzetu
	DDRA |= (1 << PA7);
    12c4:	81 e2       	ldi	r24, 0x21	; 33
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	21 e2       	ldi	r18, 0x21	; 33
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	20 68       	ori	r18, 0x80	; 128
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
	PORTA &= ~(1 << PA7);
    12d6:	82 e2       	ldi	r24, 0x22	; 34
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	22 e2       	ldi	r18, 0x22	; 34
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	f9 01       	movw	r30, r18
    12e0:	20 81       	ld	r18, Z
    12e2:	2f 77       	andi	r18, 0x7F	; 127
    12e4:	fc 01       	movw	r30, r24
    12e6:	20 83       	st	Z, r18

	//petla nieskonczona
	while(1){
		PORTA |= (1 << PA7);
    12e8:	82 e2       	ldi	r24, 0x22	; 34
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	22 e2       	ldi	r18, 0x22	; 34
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	f9 01       	movw	r30, r18
    12f2:	20 81       	ld	r18, Z
    12f4:	20 68       	ori	r18, 0x80	; 128
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	aa e7       	ldi	r26, 0x7A	; 122
    1300:	b4 e4       	ldi	r27, 0x44	; 68
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	ab 83       	std	Y+3, r26	; 0x03
    1308:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4a e7       	ldi	r20, 0x7A	; 122
    1310:	53 e4       	ldi	r21, 0x43	; 67
    1312:	69 81       	ldd	r22, Y+1	; 0x01
    1314:	7a 81       	ldd	r23, Y+2	; 0x02
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	0e 94 3a 02 	call	0x474	; 0x474 <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	af 83       	std	Y+7, r26	; 0x07
    1328:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	6d 81       	ldd	r22, Y+5	; 0x05
    1334:	7e 81       	ldd	r23, Y+6	; 0x06
    1336:	8f 81       	ldd	r24, Y+7	; 0x07
    1338:	98 85       	ldd	r25, Y+8	; 0x08
    133a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__ltsf2>
    133e:	88 23       	and	r24, r24
    1340:	2c f4       	brge	.+10     	; 0x134c <main+0xa0>
		__ticks = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9a 87       	std	Y+10, r25	; 0x0a
    1348:	89 87       	std	Y+9, r24	; 0x09
    134a:	42 c0       	rjmp	.+132    	; 0x13d0 <main+0x124>
	else if (__tmp > 65535)
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	3f ef       	ldi	r19, 0xFF	; 255
    1350:	4f e7       	ldi	r20, 0x7F	; 127
    1352:	57 e4       	ldi	r21, 0x47	; 71
    1354:	6d 81       	ldd	r22, Y+5	; 0x05
    1356:	7e 81       	ldd	r23, Y+6	; 0x06
    1358:	8f 81       	ldd	r24, Y+7	; 0x07
    135a:	98 85       	ldd	r25, Y+8	; 0x08
    135c:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1360:	18 16       	cp	r1, r24
    1362:	64 f5       	brge	.+88     	; 0x13bc <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	69 81       	ldd	r22, Y+1	; 0x01
    136e:	7a 81       	ldd	r23, Y+2	; 0x02
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	0e 94 3a 02 	call	0x474	; 0x474 <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 55 00 	call	0xaa	; 0xaa <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	9a 87       	std	Y+10, r25	; 0x0a
    138a:	89 87       	std	Y+9, r24	; 0x09
    138c:	12 c0       	rjmp	.+36     	; 0x13b2 <main+0x106>
    138e:	89 e1       	ldi	r24, 0x19	; 25
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9c 87       	std	Y+12, r25	; 0x0c
    1394:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1396:	8b 85       	ldd	r24, Y+11	; 0x0b
    1398:	9c 85       	ldd	r25, Y+12	; 0x0c
    139a:	8c 01       	movw	r16, r24
    139c:	c8 01       	movw	r24, r16
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <main+0xf2>
    13a2:	8c 01       	movw	r16, r24
    13a4:	1c 87       	std	Y+12, r17	; 0x0c
    13a6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9a 87       	std	Y+10, r25	; 0x0a
    13b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	51 f7       	brne	.-44     	; 0x138e <main+0xe2>
    13ba:	17 c0       	rjmp	.+46     	; 0x13ea <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13bc:	6d 81       	ldd	r22, Y+5	; 0x05
    13be:	7e 81       	ldd	r23, Y+6	; 0x06
    13c0:	8f 81       	ldd	r24, Y+7	; 0x07
    13c2:	98 85       	ldd	r25, Y+8	; 0x08
    13c4:	0e 94 55 00 	call	0xaa	; 0xaa <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9a 87       	std	Y+10, r25	; 0x0a
    13ce:	89 87       	std	Y+9, r24	; 0x09
    13d0:	89 85       	ldd	r24, Y+9	; 0x09
    13d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d4:	9e 87       	std	Y+14, r25	; 0x0e
    13d6:	8d 87       	std	Y+13, r24	; 0x0d
    13d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13da:	9e 85       	ldd	r25, Y+14	; 0x0e
    13dc:	8c 01       	movw	r16, r24
    13de:	f8 01       	movw	r30, r16
    13e0:	31 97       	sbiw	r30, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <main+0x134>
    13e4:	8f 01       	movw	r16, r30
    13e6:	1e 87       	std	Y+14, r17	; 0x0e
    13e8:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(1000);
		PORTA &= ~(1 << PA7);
    13ea:	82 e2       	ldi	r24, 0x22	; 34
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	22 e2       	ldi	r18, 0x22	; 34
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	f9 01       	movw	r30, r18
    13f4:	20 81       	ld	r18, Z
    13f6:	2f 77       	andi	r18, 0x7F	; 127
    13f8:	fc 01       	movw	r30, r24
    13fa:	20 83       	st	Z, r18
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	aa e7       	ldi	r26, 0x7A	; 122
    1402:	b4 e4       	ldi	r27, 0x44	; 68
    1404:	8f 87       	std	Y+15, r24	; 0x0f
    1406:	98 8b       	std	Y+16, r25	; 0x10
    1408:	a9 8b       	std	Y+17, r26	; 0x11
    140a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	4a e7       	ldi	r20, 0x7A	; 122
    1412:	53 e4       	ldi	r21, 0x43	; 67
    1414:	6f 85       	ldd	r22, Y+15	; 0x0f
    1416:	78 89       	ldd	r23, Y+16	; 0x10
    1418:	89 89       	ldd	r24, Y+17	; 0x11
    141a:	9a 89       	ldd	r25, Y+18	; 0x12
    141c:	0e 94 3a 02 	call	0x474	; 0x474 <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	9c 8b       	std	Y+20, r25	; 0x14
    1428:	ad 8b       	std	Y+21, r26	; 0x15
    142a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5f e3       	ldi	r21, 0x3F	; 63
    1434:	6b 89       	ldd	r22, Y+19	; 0x13
    1436:	7c 89       	ldd	r23, Y+20	; 0x14
    1438:	8d 89       	ldd	r24, Y+21	; 0x15
    143a:	9e 89       	ldd	r25, Y+22	; 0x16
    143c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__ltsf2>
    1440:	88 23       	and	r24, r24
    1442:	2c f4       	brge	.+10     	; 0x144e <main+0x1a2>
		__ticks = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	98 8f       	std	Y+24, r25	; 0x18
    144a:	8f 8b       	std	Y+23, r24	; 0x17
    144c:	42 c0       	rjmp	.+132    	; 0x14d2 <main+0x226>
	else if (__tmp > 65535)
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	3f ef       	ldi	r19, 0xFF	; 255
    1452:	4f e7       	ldi	r20, 0x7F	; 127
    1454:	57 e4       	ldi	r21, 0x47	; 71
    1456:	6b 89       	ldd	r22, Y+19	; 0x13
    1458:	7c 89       	ldd	r23, Y+20	; 0x14
    145a:	8d 89       	ldd	r24, Y+21	; 0x15
    145c:	9e 89       	ldd	r25, Y+22	; 0x16
    145e:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1462:	18 16       	cp	r1, r24
    1464:	64 f5       	brge	.+88     	; 0x14be <main+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1470:	78 89       	ldd	r23, Y+16	; 0x10
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	9a 89       	ldd	r25, Y+18	; 0x12
    1476:	0e 94 3a 02 	call	0x474	; 0x474 <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 55 00 	call	0xaa	; 0xaa <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	98 8f       	std	Y+24, r25	; 0x18
    148c:	8f 8b       	std	Y+23, r24	; 0x17
    148e:	12 c0       	rjmp	.+36     	; 0x14b4 <main+0x208>
    1490:	89 e1       	ldi	r24, 0x19	; 25
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9a 8f       	std	Y+26, r25	; 0x1a
    1496:	89 8f       	std	Y+25, r24	; 0x19
    1498:	89 8d       	ldd	r24, Y+25	; 0x19
    149a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    149c:	8c 01       	movw	r16, r24
    149e:	c8 01       	movw	r24, r16
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <main+0x1f4>
    14a4:	8c 01       	movw	r16, r24
    14a6:	1a 8f       	std	Y+26, r17	; 0x1a
    14a8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14aa:	8f 89       	ldd	r24, Y+23	; 0x17
    14ac:	98 8d       	ldd	r25, Y+24	; 0x18
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	98 8f       	std	Y+24, r25	; 0x18
    14b2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b4:	8f 89       	ldd	r24, Y+23	; 0x17
    14b6:	98 8d       	ldd	r25, Y+24	; 0x18
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	51 f7       	brne	.-44     	; 0x1490 <main+0x1e4>
    14bc:	18 c0       	rjmp	.+48     	; 0x14ee <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14be:	6b 89       	ldd	r22, Y+19	; 0x13
    14c0:	7c 89       	ldd	r23, Y+20	; 0x14
    14c2:	8d 89       	ldd	r24, Y+21	; 0x15
    14c4:	9e 89       	ldd	r25, Y+22	; 0x16
    14c6:	0e 94 55 00 	call	0xaa	; 0xaa <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	98 8f       	std	Y+24, r25	; 0x18
    14d0:	8f 8b       	std	Y+23, r24	; 0x17
    14d2:	8f 89       	ldd	r24, Y+23	; 0x17
    14d4:	98 8d       	ldd	r25, Y+24	; 0x18
    14d6:	9c 8f       	std	Y+28, r25	; 0x1c
    14d8:	8b 8f       	std	Y+27, r24	; 0x1b
    14da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14de:	8c 01       	movw	r16, r24
    14e0:	f8 01       	movw	r30, r16
    14e2:	31 97       	sbiw	r30, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <main+0x236>
    14e6:	8f 01       	movw	r16, r30
    14e8:	1c 8f       	std	Y+28, r17	; 0x1c
    14ea:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(1000);
	}
    14ec:	fd ce       	rjmp	.-518    	; 0x12e8 <main+0x3c>
    14ee:	fc ce       	rjmp	.-520    	; 0x12e8 <main+0x3c>

000014f0 <__prologue_saves__>:
    14f0:	2f 92       	push	r2
    14f2:	3f 92       	push	r3
    14f4:	4f 92       	push	r4
    14f6:	5f 92       	push	r5
    14f8:	6f 92       	push	r6
    14fa:	7f 92       	push	r7
    14fc:	8f 92       	push	r8
    14fe:	9f 92       	push	r9
    1500:	af 92       	push	r10
    1502:	bf 92       	push	r11
    1504:	cf 92       	push	r12
    1506:	df 92       	push	r13
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	ca 1b       	sub	r28, r26
    151a:	db 0b       	sbc	r29, r27
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	09 94       	ijmp

00001528 <__epilogue_restores__>:
    1528:	2a 88       	ldd	r2, Y+18	; 0x12
    152a:	39 88       	ldd	r3, Y+17	; 0x11
    152c:	48 88       	ldd	r4, Y+16	; 0x10
    152e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1530:	6e 84       	ldd	r6, Y+14	; 0x0e
    1532:	7d 84       	ldd	r7, Y+13	; 0x0d
    1534:	8c 84       	ldd	r8, Y+12	; 0x0c
    1536:	9b 84       	ldd	r9, Y+11	; 0x0b
    1538:	aa 84       	ldd	r10, Y+10	; 0x0a
    153a:	b9 84       	ldd	r11, Y+9	; 0x09
    153c:	c8 84       	ldd	r12, Y+8	; 0x08
    153e:	df 80       	ldd	r13, Y+7	; 0x07
    1540:	ee 80       	ldd	r14, Y+6	; 0x06
    1542:	fd 80       	ldd	r15, Y+5	; 0x05
    1544:	0c 81       	ldd	r16, Y+4	; 0x04
    1546:	1b 81       	ldd	r17, Y+3	; 0x03
    1548:	aa 81       	ldd	r26, Y+2	; 0x02
    154a:	b9 81       	ldd	r27, Y+1	; 0x01
    154c:	ce 0f       	add	r28, r30
    154e:	d1 1d       	adc	r29, r1
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	ed 01       	movw	r28, r26
    155c:	08 95       	ret

0000155e <_exit>:
    155e:	f8 94       	cli

00001560 <__stop_program>:
    1560:	ff cf       	rjmp	.-2      	; 0x1560 <__stop_program>
